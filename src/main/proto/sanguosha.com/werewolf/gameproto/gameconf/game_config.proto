// Generated by github.com/davyxu/tabtoy
// Version: 2.9.1
// DO NOT EDIT!!

syntax = "proto3";

package com.mapi.werewolf.gameconf;

// Defined in table: GlobalsType
enum BoolTyp
{	

	// 否
	BOTNo = 0; // 布尔类型

	// 是
	BOTYes = 1; 

}

// Defined in table: GlobalsType
enum ChoiceTyp
{	

	
	CHTDefault = 0; // 选择类型

	// 否
	CHTNo = 1; 

	// 是
	CHTYes = 2; 

}

// Defined in table: GlobalsType
enum GoodsCategory
{	

	
	InvalidGoods = 0; // 无效道具类型

	
	GCTest = 1; // 用于测试.

	
	GCOther = 2; // 其它类别.

	
	GCMatchHonor = 3; // 赛事勋章, 该类道具的 data 字段含有 MatchID 结构.

	
	GCUserData = 4; // 游戏数据

	
	GCAvatarBorder = 5; // 头像框.

	
	GCMatchBeginner = 6; // 开赛券

	
	GCEntryCoupon = 7; // 排名赛参赛券

	
	GCAvatarMic = 8; // 麦克风

	
	GCRenamingCard = 9; // 改名卡

	
	GCCardSkin = 10; // 卡牌皮肤

	
	GCCard = 11; // 卡牌

	
	GCChest = 12; // 宝箱

	
	GCAddSigninCard = 13; // 补签卡

	
	GCCardFragment = 14; // 卡牌碎片

	
	GCSkinFragment = 15; // 皮肤碎片

	
	GCCardV2 = 16; // v2卡牌

	
	GCCardBag = 17; // 卡包

	
	GCRaceTicket = 18; // 竞技场入场券

	
	GCMeme = 19; // 表情包

	
	GCCoreFrag = 20; // 品质核心碎片

	
	GCCardBack = 21; // v2卡背

	
	GCAvatarHead = 22; // 头像

	
	GCMonthCard = 23; // 月卡

	
	GCAchieveMedal = 26; // 成就奖章

	
	GCChatBubble = 27; // 聊天气泡

	
	GCSpeaker = 28; // 喇叭

	
	GCGuild = 29; // 公会道具

	
	GCBuyRight = 30; // 限时特惠购买权

	
	GCOptionalChest = 31; // 自选宝箱

	
	GCGoodFragment = 32; // 物品碎片

}

// Defined in table: GlobalsType
enum CGRoleID
{	

	
	InvalidRole = 0; 

	
	CuteNewWolf = 1; // 萌新狼

	
	FreshSeer = 2; // 新手语言家

	
	WitchTrainee = 3; // 女巫学徒.

	
	NewComeDefender = 4; // 新来的守卫.

	
	BlindVillager = 5; // 瞎猜的新手村民.

	
	VoteVillager = 6; // 投票的新手村民

	
	KillCastleWolf = 7; // 图城狼

	
	KillVillagerWolf = 8; // 图民狼

	
	KillGodWolf = 9; // 图神狼

	
	CheckVillagerSeer = 10; // 验民的预言家

	
	ThrowHgWitch = 11; // 扔银水的女巫

	
	TollDefender = 12; // 敲钟的守卫

	
	HideHunter = 13; // 躲藏的猎人

	
	LongevityElder = 14; // 长寿的长老

	
	LinkGodCupid = 15; // 连神的丘比特

	
	WorryScapegoat = 16; // 烦人的替罪羊

	
	AddTroubleIdiot = 17; // 添乱的白痴

	
	SelfVindicateVillager = 18; // 自白的村民

	
	MutualProtectVillager = 19; // 互保的村民

	
	VigilantVillager = 20; // 警惕的村民

	
	FindWolfVillager = 21; // 找狼的村民

	
	LongevityVillager = 22; // 长寿的村民

	
	IndustriousVillager = 23; // 勤劳的村民

	
	StayUpLateVillager = 24; // 熬夜的村民

	
	ConcealVillager = 25; // 掩盖的村民

	
	SurveySeer = 26; // 观察的预言家

	
	Tactwitch = 27; // 老练的女巫

	
	ShieldDefender = 28; // 掩护的守卫

	
	OveraweHunter = 29; // 威慑的猎人

	
	RescueVillagerElder = 30; // 救民的长老

	
	LovelornCupid = 31; // 失恋的丘比特

	
	NaughtyScapegoat = 32; // 闹腾的替罪羊

	
	MakeTroubleIdiot = 33; // 捣乱的白痴

	
	SurveyVillager = 34; // 观察的村民

	
	RashVillager = 35; // 莽撞的村民

	
	MisleadVillager = 36; // 误导的村民

	
	PkPlatformVillager = 37; // PK台的村民

	
	FishoutVillager = 38; // 捞人的村民

	
	LovelornVillager = 39; // 失恋的村民

	
	NaughtyVillager = 40; // 闹腾的村民

	
	MakeTroubleVillager = 41; // 捣乱的村民

	
	SteelWolf = 42; // 金刚狼

	
	BarbWolf = 43; // 倒钩狼

	
	SortingWolf = 44; // 分票狼

	
	PeepLittleGirl = 45; // 偷看的小女孩

	
	NotRoarBear = 46; // 不咆哮的熊

	
	BewitchPiper = 47; // 蛊惑的吹笛者

	
	HideRobber = 48; // 隐匿的盗贼

	
	DefamationCrow = 49; // 诽谤的乌鸦

	
	SacrificeNun = 50; // 献祭的修女

	
	JusticeMixedBlood = 51; // 正义的混血儿

	
	LearnWolfWildChild = 52; // 学狼的野孩子

	
	ImpulsionVillager = 53; // 冲动的村民

	
	GuaranteeVillager = 54; // 担保的村民

	
	ChangeSeatVillager = 55; // 换位子的村民

	
	CurseVillager = 56; // 诅咒的村民

	
	SacrificeVillager = 57; // 献祭的村民

	
	CopyVillager = 58; // 复制的村民

	
	ConcealVillager2 = 59; // 替代的村民2

	
	FindGodVillager = 60; // 找神的村民

	
	WhiteWolf = 61; // 白狼

	
	AhrimanWolf = 62; // 恶灵狼

	
	KingWolf = 63; // 狼王

	
	DangerBomber = 64; // 危险的炸弹人

	
	StimulateFox = 65; // 鼓舞的九尾狐

	
	MindControlSuccubus = 66; // 控心的魅魔

	
	JusticeKnight = 67; // 正义骑士

	
	AnxietyInsomniac = 68; // 焦虑的失眠者

	
	NightPsychic = 69; // 深夜的通灵人

	
	ContractDeath = 70; // 契约死神

	
	SilentElder = 71; // 禁言长老

	
	RestVillager = 72; // 休养的村民

	
	MindControlVillager = 73; // 控心的村民

	
	StimulateVillager = 74; // 鼓舞的村民

	
	DownwellVillager = 75; // 落井下石的村民

	
	AnxietyVillager = 76; // 焦虑的村民

	
	OptimismVillager = 77; // 乐观的村民

	
	SellSoulVillager = 78; // 售卖灵魂的村民

	
	AmnesiaVillager = 79; // 健忘的村民

	
	WraithVillager = 80; // 村民的冤魂

	
	BreedWolf = 81; // 种狼

	
	BigWildWolf = 82; // 大野狼

	
	Magician = 83; // 魔术师

	
	Sorceress = 84; // 女巫

	
	BewitchDivision = 85; // 蛊惑师

	
	RustSwordman = 86; // 锈刃剑士

	
	ControlMoonGirl = 87; // 操纵月亮的女孩

	
	Wizard = 88; // 术士

	
	Shadow = 89; // 影子

	
	Robbers = 90; // 盗贼

	
	Wolf101 = 91; // 狼101

	
	Wolf102 = 92; // 狼102

	
	Wolf103 = 93; // 狼103

	
	Wolf104 = 94; // 狼104

	
	Villager1 = 95; // 村名1

	
	Villager2 = 96; // 村名2

	
	Villager3 = 97; // 村名3

	
	Villager4 = 98; // 村名4

	
	Villager5 = 99; // 村名5

	
	BigSkyWolf = 100; // 大天狼

	
	VillageElder = 101; // 村庄长老

	
	BreadBaker = 102; // 面包师

	
	NewIdiot = 103; // 新白痴

	
	InMouthIdiot = 104; // 插嘴的白痴

	
	Assassin = 105; // 刺客

	
	Madman = 106; // 狂人

	
	Scapegoat = 107; // 替罪羊

	
	Prayer = 108; // 祈求者

	
	DealDreamMan = 109; // 涉梦人

	
	GipsyGirl = 110; // 吉卜赛女

	
	DevilHunter = 111; // 恶魔猎手

	
	MoonForesee = 112; // 预言

	
	MoonShoot = 113; // 开枪

	
	MoonGuard = 114; // 守护

	
	DreamerFiber = 115; // 梦游者-纤维

	
	DreamerFuture = 116; // 梦游者-未来

	
	DreamerShape = 117; // 梦游者-变形

	
	DreamerChaos = 118; // 梦游者-混沌

	
	AvengeAnger = 119; // 复仇之怒

	
	NewKingWolf = 120; // 狼王

	
	ProphetWolf = 121; // 狼先知

	
	Priests = 122; // 祭师

	
	Hunter = 123; // 猎人

	
	Libel = 124; // 诽谤者

	
	Devil = 125; // 恶魔

	
	ErodeOffer = 126; // 蚀之刻-献祭

	
	EvilRider = 127; // 恶灵骑士

	
	AvatorGhost = 128; // 化身幽灵

	
	Gravedigger = 129; // 掘墓人

	
	Martyr = 130; // 殉道者

	
	Confessor = 131; // 忏悔者

	
	Missionary = 132; // 传教士

	
	HolySpiritArcher = 133; // 圣灵弓手

	
	Priestess = 134; // 女祭司

	
	GodOfficer = 135; // 神官

	
	Believer = 136; // 信徒

	
	Anchorite = 137; // 隐修士

	
	Goddess = 138; // 圣女

	
	Archbishop = 139; // 大主教

	
	ImperialBodyguard = 140; // 侍卫

	
	RichMan = 141; // 富翁

	
	Nobility = 142; // 贵族

	
	Retinue = 143; // 侍从

	
	Lifeguard = 144; // 禁卫军

	
	Herald = 145; // 传令官

	
	Chariot = 146; // 战车

	
	ThroneGuard = 147; // 王座铁卫

	
	Chancellor = 148; // 宰相

	
	Queen = 149; // 皇后

	
	King = 150; // 国王

	
	Illusionist = 151; // 幻术师

	
	Imager = 152; // 镜像师

	
	TimeEscaper = 153; // 时间逃脱者

	
	HamsterShaper = 154; // 仓鼠变形师

	
	DeatSummoner = 155; // 亡者召唤师

	
	ChaosMaker = 156; // 混沌制造者

	
	Backtracer = 157; // 回溯者

	
	MagicSwallower = 158; // 魔法吞噬者

	
	BloodborneWolf = 159; // 血源狼

	
	BeautyWolf = 160; // 狼美人

	
	TotemWolf = 161; // 图腾狼

	
	IceFieldWolf = 162; // 冰原狼

	
	CallingSoulWolf = 163; // 唤灵狼

	
	Heroides = 164; // 名媛

	
	ObedientMaid = 165; // 顺从的女仆

	
	ExecutePolice = 166; // 执警

	
	HamsterKing = 167; // 仓鼠王

	
	Hamster = 168; // 仓鼠

	
	Gargoyle = 169; // 石像鬼

	
	TombWatcher = 170; // 守墓人

	
	CupidNew = 171; // 丘比特

	
	SunGod = 172; // 太阳神

	
	ThreeBrothers1 = 173; // 三兄弟-老大

	
	ThreeBrothers2 = 174; // 三兄弟-老二

	
	ThreeBrothers3 = 175; // 三兄弟-老三

	
	GodfatherWolf = 176; // 狼教父

	
	NightmareWolf = 177; // 梦魇狼

	
	NightmareMoon = 178; // 梦魇

	
	MotherWolf = 179; // 狼母子-狼母

	
	SonWolf = 180; // 狼母子-狼子

	
	Chatelain = 181; // 城主

	
	Incendiary = 182; // 纵火者

	
	Stroller = 183; // 流浪汉

	
	NineTailedFox = 184; // 九尾狐

	
	PigGod = 185; // 猪神

	
	StammerJudge = 186; // 口吃法官

	
	BlackMarketeer = 187; // 黑市商人

	
	BlackMap = 188; // 黑市地图

	
	HandShield = 189; // 手持盾

	
	AerialAceSword = 190; // 燕返剑

	
	SagacityCane = 191; // 睿智仗

	
	TrueBlackMarketeer = 192; // 传奇黑市商人

	
	TrueBlackMap = 193; // 真黑市地图

	
	ImmortalShield = 194; // 不朽盾

	
	Excalibur = 195; // 圣剑

	
	MagicWand = 196; // 魔仗

	
	ElderSister = 197; // 两姐妹-姐姐

	
	LittleSister = 198; // 两姐妹-妹妹

	
	Drillmaster = 199; // 教官

	
	FestivalHosted = 200; // 祭典主持

	
	LuckOwl = 201; // 幸运的白鸮

	
	AdversityBlackCat = 202; // 不幸的黑猫

	
	SwordsmanZero = 203; // 游侠Zero

	
	OblationPortal = 204; // 祭品传送门

	
	Devourer = 205; // 噬元兽

	
	Minstrel = 206; // 吟游诗人

	
	CopyResearcher = 207; // 复制研究员

	
	GuideMan = 208; // 引路人

	
	SampleClerk = 209; // 样本储存员

	
	IdeaProjectionMan = 210; // 意念投影师

	
	AwakeningPeople = 211; // 觉醒者

	
	Knight = 212; // 骑士

	
	VillageConvener = 213; // 村庄召集人

	
	Prince = 214; // 王子

	
	ZombieWolf = 215; // 僵尸狼

	
	ProbationHunter = 216; // 见习猎手

	
	HotCooker = 217; // 热情厨师

	
	TravelBoy = 218; // 游历少年

	
	BabyGiant = 219; // 恐狼巨人

	
	WeaponTrader = 220; // 武器商人

	
	Jordan = 221; // 旅店老板

	
	WolfSeeker = 222; // 寻狼大师

	
	FightingCock = 223; // 好斗剑痴

	
	Tracer = 224; // 跟踪者

	
	Woodpecker = 225; // 啄木鸟

	
	SabCat = 226; // 扰乱者

	
	CoverUpMan = 227; // 掩盖者

	
	ChangeFaceMan = 228; // 千面人-神面具

	
	ArbitrarySpy = 229; // 武断密探

	
	LittleBird = 230; // 小小鸟

	
	LittleBeagle = 231; // 小猎犬

	
	LittleBrachnid = 232; // 小蜘蛛

	
	IntelligenceBird = 233; // 情报网伊鸟

	
	AvigatorEgret = 234; // 领航员白鹭

	
	BazaSpiden = 235; // 八爪蜘蛛

	
	Parrot = 236; // 学舌者鹦鹉

	
	CodeSpyOn = 237; // 代号:侦查

	
	CodeExposure = 238; // 代号:曝光

	
	CodeAssassinate = 239; // 代号:暗杀

	
	ZombiePoisonWolf = 240; // 僵尸毒狼

	
	ArmyDrummer = 241; // 军队鼓手

	
	GeneralGarrison = 242; // 驻防将军

	
	Quartermaster = 243; // 军需官

	
	FidelityGuard = 244; // 忠诚卫士

	
	VipGuard = 245; // 要人护卫

	
	AggressiveFighter = 246; // 好斗拳手

	
	EnforcementGriffin = 247; // 执法狮鹫

	
	ToughVeteran = 248; // 坚韧老兵

	
	RecruitingAgent = 249; // 征兵员

	
	HarmorGuard = 250; // 重甲卫士

	
	SquadShieldSoldier = 251; // 小队盾兵

	
	SquadMarines = 252; // 小队枪兵

	
	MakePeaceLead = 253; // 议和代表

	
	ScavengerWolf = 254; // 食腐狼

	
	RevengeWolf = 255; // 复仇狼

	
	Carrion = 256; // 腐尸

	
	StyxBoatman = 257; // 冥河船夫

	
	Infestor = 258; // 感染者

	
	RiteDemon = 259; // 仪式恶魔

	
	CemeteryCaller = 260; // 墓地呼唤者

	
	GraveRobber = 261; // 盗墓贼

	
	Fanatic = 262; // 狂信徒

	
	AlopeciaScientist = 263; // 脱发科学家

	
	VillageDefender = 264; // 村庄守护者

	
	DecayScientist = 265; // 衰变科学者

	
	ChorddDivision = 266; // 共鸣师

	
	FortifiersHart = 267; // 强化者图哈特

	
	BeheadedSpy = 268; // 斩首间谍

	
	WhisperTales = 269; // 细语告密客

	
	CopierMan = 270; // 临摹者

	
	WolfDog = 271; // 狼狗

	
	Monsterwolf = 272; // 恶狼

	
	Hachiko = 273; // 忠犬

	
	CrazyMan = 274; // 疯子

	
	Avenger = 275; // 复仇者

	
	Gemini = 276; // 双子

	
	Trueness = 277; // 纯真

	
	EvilPhantom = 278; // 邪魅

	
	Hagdon = 279; // 鸥鸟

	
	SeniorVillager = 280; // 高级村民

	
	Adoptionist = 281; // 信仰者

	
	Pardoner = 282; // 宽恕者

	
	BestowMan = 283; // 恩赐者

	
	Reliever = 284; // 救济者

	
	TwilightWorshipper = 285; // 暮间礼拜者

	
	Guardians = 286; // 神选者

	
	BeliefModel = 287; // 信仰楷模

	
	TrypophobiaGiant = 288; // 密恐巨人

	
	Metamormon = 289; // 变形兽

	
	Selene = 290; // 月之女神

	
	FullMoonNight = 291; // 月圆之夜

	
	KendoApprentice = 292; // 剑道学徒

	
	HatredWolfSoldier = 293; // 仇狼战士

	
	DiligentApprentice = 294; // 勤勉学徒

	
	ForTravelers = 295; // 贪财旅者

	
	IdentificationOfficer = 296; // 身份认证员

	
	BlottingSunDevil = 297; // 蔽日魔鬼

	
	MarshWitch = 298; // 沼泽巫婆

	
	MadAlchemis = 299; // 狂热炼金师

	
	TimeMagician = 300; // 时间魔术师

	
	Slime = 301; // 史莱姆

	
	CloningScientist = 302; // 克隆学家

	
	WhiteOwl = 303; // 白色猫头鹰

	
	IllusionMaster = 304; // 幻视师

	
	GiveWingsAngel = 305; // 赐翼天使

	
	BatRoleCard = 306; // 蝙蝠

	
	NailRoleCard = 307; // 钉子

	
	Eavesdropper = 308; // 窃听者

	
	Kidnapper = 309; // 绑匪

	
	CensusOfficer = 310; // 人口普查官

	
	TroopsSpy = 311; // 部队内应

	
	informSoldier = 312; // 报信士兵

	
	OctoFeelers = 313; // 八爪章鱼

	
	SquadLeader = 314; // 小队长

	
	MaskWolf = 315; // 面具狼

	
	ShadowWolf = 316; // 影隻狼

	
	NewRecruit = 317; // 新兵

	
	Soldier = 318; // 士兵

	
	Arrester = 319; // 逮捕人

	
	FlyingSquirrel = 320; // 飞鼠

	
	DoubleAgent = 321; // 双面间谍

	
	FirstBlood = 322; // 第一滴血

	
	SecondBlood = 323; // 第二滴血

	
	Wolfdr = 324; // 魔狼

	
	SkyPunish = 325; // 天罚

	
	Falcon = 326; // 猎鹰

	
	DragonSlayer = 327; // 屠龙勇士

	
	VillagerMask = 328; // 千面人-民面具

	
	WolfMask = 329; // 千面人-狼面具

	
	DovePioneer = 330; // 白鸽先锋

	
	LordBlackCoffin = 331; // 黑棺魔王

	
	GospelMan = 332; // 福音师

	
	kingBloodDescendant = 333; // 王血传人

	
	AwakeningWarriors = 334; // 觉醒勇士

	
	WolfShadowMan = 335; // 狼影者

	
	ThiefMaster = 336; // 神偷

	
	PlayBoy = 337; // 捣蛋顽童

	
	ActiveApprentice = 338; // 踊跃学徒

	
	Machinist = 339; // 机械师

	
	SteamDragonfly = 340; // 蒸汽蜻蜓

	
	Hamal = 341; // 搬运工

	
	HamsterKeeper = 342; // 仓鼠饲养员

	
	DifficultGhosts = 343; // 难缠鬼魂

	
	SoulEnhancer = 344; // 灵魂强化师

	
	SelfIgnitionImp = 345; // 自燃小鬼

	
	InspirationalWarrior = 346; // 励志勇士

	
	ChargeCaptain = 347; // 冲锋队长

	
	PatientAssassins = 348; // 耐心刺客

	
	RecklessSoldier = 349; // 鲁莽大兵

	
	WiseMen = 350; // 求知贤者

	
	Prayers = 351; // 祈福师

	
	UglyMan = 352; // 丑八怪

	
	HandsomeMan = 353; // 美男子

	
	HamsterSpy = 354; // 仓鼠特务

	
	IntimidatingMaster = 355; // 恐吓大师

	
	Philanthropist = 356; // 慈善家

	
	ForesightMaster = 357; // 远见明师

	
	AsylumDivision = 358; // 庇护师

	
	Purgatory = 359; // 赎罪券贩子

	
	ConfessionalMonks = 360; // 告解僧侣

	
	ChurchPorter = 361; // 教堂看门人

	
	Fundraiser = 362; // 募捐信徒

	
	ChurchEnvoy = 363; // 教会使者

	
	FlyWolf = 364; // 飞狼

	
	GouWolf = 365; // 苟命狼

	
	ForestRanger = 366; // 森林突击手

	
	ForestSentinel = 367; // 森林哨兵

	
	ShadowElder = 368; // 暗影长者

	
	WailingSpirit = 369; // 哭嚎妖灵

	
	Victim = 370; // 牺牲者

	
	Conspirators = 371; // 共谋者

	
	CityPatrol = 372; // 巡城队员

	
	FlagBearer = 373; // 冲锋旗手

	
	LordOfShadows = 374; // 影流之主

	
	ShadowSummoner = 375; // 影子召唤师

	
	LurkingKing = 376; // 潜伏之王

	
	LeadConductor = 377; // 引线员

	
	FlameThrower = 378; // 火焰投弹手

	
	NinjaWolf = 379; // 忍狼

	
	HunterWood = 380; // 森林伏击手

	
	SacrificialSupervisor = 381; // 献祭监工

	
	SentencedPerson = 382; // 处刑人

	
	GateManager = 383; // 城门管理者

	
	WolfBloodTester = 384; // 狼血试验员

	
	RevengeAssassin = 385; // 复仇刺客

	
	WeaponEnhancer = 386; // 武器强化师

	
	GraveyardHowl = 387; // 墓地嚎鬼

	
	ShieldCorps = 388; // 盾兵团

	
	DisciplinaryPaladin = 389; // 惩戒圣骑

	
	ColossusSummoner = 390; // 巨像召唤师

	
	Colossus = 391; // 巨像（衍生牌）

	
	Networker = 392; // 织网者

	
	MilitiaCommander = 393; // 民兵长

	
	Vampire = 394; // 吸血鬼

	
	RecruitsInstructor = 395; // 新兵教官

	
	ImpartialOfficer = 396; // 公正官

	
	FireballBeginners = 397; // 火球初学者

	
	Mutiny = 398; // 叛变者

	
	HospitableUsher = 399; // 好客招待员

	
	RoaringKing = 400; // 咆哮之王

	
	DarknessPharaoh = 401; // 黑暗法老

	
	SacrificeDeed = 402; // 献祭契约

	
	BraveShield = 403; // 盾之勇者

	
	OrderExecutor = 404; // 敕令执行者

	
	CrazyBreeder = 405; // 疯狂饲养员

	
	GreatExperiment = 406; // 伟大的实验

	
	MousetrapKing = 407; // 猎鼠王

	
	ArmoredWarrior = 408; // 盔甲武士

	
	SelfExposeWolf = 409; // 自曝狼

	
	GuideWolf = 410; // 带路狼

	
	ReincarnationGirl = 411; // 转生女孩

	
	Cleaner = 412; // 清洁员

	
	WeaponSmuggler = 413; // 利器走私人

	
	RatBrother = 414; // 养鼠兄弟

	
	BraggingDrunk = 415; // 吹嘘醉汉

	
	RecklessYouth = 416; // 莽撞青年

	
	HelpGirl = 417; // 呼救女孩

	
	GunnerHunter = 418; // 补枪猎民

	
	ShapeWolf = 419; // 化身狼

	
	DryBonesWolf = 420; // 骨王狼

	
	BackWolf = 421; // 返乡狼

	
	BackHome = 422; // 返乡

	
	ControlWolf = 423; // 控心狼

	
	MindControl = 424; // 控心

	
	VillageHooligan = 425; // 村口流氓

	
	KiteDealer = 426; // 风筝贩子

	
	SocialMaster = 427; // 社交达人

	
	EatPoisonWolf = 428; // 食蛊狼

	
	TwilightRaider = 429; // 暮色袭击者

	
	Cerberus = 430; // 地狱三头犬

	
	PatrolGeneral = 431; // 巡视督军

	
	Baptism = 432; // 洗礼教徒

	
	FastGunman = 433; // 快枪手

	
	UnstableWaterElement = 434; // 不稳定水元素

	
	UnstableFireElement = 435; // 不稳定火元素

	
	TestVehicle = 436; // 实验飞行器

	
	Countess = 437; // 女伯爵

	
	CouncilOrganizer = 438; // 议会组织者

	
	VillagerHeirs = 439; // 村民继承者

	
	BonfireDancer = 440; // 篝火舞者

	
	GraveLord = 441; // 墓穴领主

	
	LightningPolicewoman = 442; // 放电女警

	
	Berserker = 443; // 狂暴战士

	
	FieldTransporter = 444; // 战地运输员

	
	HomeDeliveryWitch = 445; // 宅急送魔女

	
	Nightingale = 446; // 夜莺

	
	SecretReporter = 447; // 密报员

	
	OriginWolf = 448; // 起源狼

	
	OceanKing = 449; // 大海贼王

	
	TreasureExploration = 450; // 宝藏探险

	
	Instigator = 451; // 怂恿者

	
	UnknownFission = 452; // 未知裂变体

	
	Genie = 453; // 灯神

	
	KillerDominator = 454; // 杀手支配者

	
	Investigator = 455; // 侦察眼

	
	NightAscetic = 456; // 夜幕苦行僧

	
	ColossalStatue = 457; // 巨像者

	
	GrandmaWolf = 458; // 狼外婆

	
	LittleRed = 459; // 小红帽

	
	DisasterCard1 = 460; // 暗黑军势

	
	DisasterCard2 = 461; // 末日之握

	
	DisasterCard3 = 462; // 冥界窥视

	
	DarkGuard = 463; // 暗黑守卫

	
	PoisonMaster = 464; // 毒药师

	
	SpicyChef = 465; // 辛辣大厨

	
	Vendor = 466; // 小贩

	
	TaxCollector = 467; // 税务官

	
	BookSeller = 468; // 书店老板

	
	SausageFD = 469; // 香肠厂长

	
	HiredKiller = 470; // 受雇杀手

	
	WolfHater = 471; // 仇狼富豪

	
	BloodGold = 472; // 血金

	
	PrivateDetective = 473; // 私家侦探

	
	CaravanGuard = 474; // 商队护卫

	
	RuneMaker = 475; // 符文匠

	
	PetDealer = 476; // 宠物商人

	
	CrossbowMan = 477; // 强弩手

	
	Briber = 478; // 行贿者

	
	Buildalot = 479; // 地产大亨

	
	Monopoly = 480; // 垄断

	
	VillagePedlar = 481; // 村庄游商

	
	GarbageCollector = 482; // 垃圾回收商

	
	MidgetRicher = 483; // 侏儒富豪

	
	EvilBM = 484; // 黑手

	
	ThreePhaseDevil = 600; // 三相魔

	
	WarlikeWolf = 601; // 好战狼

	
	SacrificeWolf = 602; // 献祭狼

	
	ArmorWolf = 603; // 重甲狼

	
	SchemeWolf = 604; // 阴谋狼

	
	SplitWolf = 605; // 分身狼

	
	FlyingSaucerWolf = 606; // 飞碟狼

	
	ThreePartiesWolf = 607; // 三头狼

	
	RampantFearWolf = 608; // 肆虐恐狼

	
	ColorfulDarkWolf = 609; // 五彩暗黑狼

	
	WakefulVillageHead = 610; // 不眠村长

	
	WakefulRole = 611; // 不眠神职

	
	WakefulChetnik = 612; // 不眠游击士

	
	WakefulDisciple = 613; // 不眠使徒

	
	WakefulFanbing = 614; // 不眠番兵

	
	WakefulClergy = 615; // 不眠神官

	
	WakefulPsychic = 616; // 不眠灵术师

	
	WakefulFlyer = 617; // 不眠飞翔者

	
	WakefulHealer = 618; // 不眠治愈师

	
	BanishWolf = 619; // 放逐狼

	
	HydrogenElf = 620; // 氢精灵

	
	CarbonElf = 621; // 碳精灵

	
	OxygenElf = 622; // 氧精灵

	
	WaterSpiritElement = 623; // 水灵元素

	
	FireSpiritElement = 624; // 火灵元素

	
	IceFlameGod = 625; // 冰焰神

	
	FeedPigeonMonk = 626; // 喂鸽武僧

	
	CaressWolfDeacon = 627; // 抚狼执事

	
	PatCatGuard = 628; // 撸猫城尉

	
	FloristPriest = 629; // 养花祭司

	
	AoyingMaster = 630; // 熬鹰法师

	
	DogfightDancer = 631; // 斗犬舞女

	
	Disaster4nyxl = 632; // 奴役心灵

	
	Disaster5mwzl = 633; // 魔王诏令

	
	Disaster6hhms = 634; // 换魂秘术

	
	Disaster7yyzy = 635; // 月圆之夜

	
	Disaster8sjwq = 636; // 时间弯曲

	
	Disaster9hylj = 637; // 火焰龙卷

	
	Disaster10gyss = 638; // 鬼影闪烁

	
	CavesWolf = 639; // 穴居狼

	
	LurkWolf = 640; // 潜伏狼

	
	StrikeWolf = 641; // 闪击狼

	
	AssassinateWolf = 642; // 暗杀狼

	
	AssassinateNight = 643; // 暗杀之夜

	
	TreeHoleGiant = 644; // 树洞巨人

	
	SeekHelpBoxer = 645; // 求援拳手

	
	NightElfer = 646; // 暗灵师

	
	ArmyDrafter = 647; // 军征官

	
	PrayChizuru = 648; // 祈福千鹤

	
	DrawLots = 649; // 抽签

	
	NinbouSwordman = 650; // 忍法剑士

	
	CheatPlayer = 651; // 欺诈牌手

	
	IllusionWolf = 652; // 幻术狼

	
	WolfCheater = 653; // 狼骗子

	
	LightningWhipper = 654; // 闪电鞭手

	
	WolfBlunderbuss = 655; // 狼铳炮

	
	BazaarDispatcher = 656; // 集市调度官

	
	ThroughWolfWizard = 657; // 通狼术士

	
	SmellWolfHusky = 658; // 嗅狼哈士奇

	
	AlertBalloon = 659; // 警戒热气球

	
	FlyingSickleHand = 660; // 飞镰手

	
	DevilSpirit = 661; // 魂使魔

	
	TrickeryStaff = 662; // 诡术参谋

	
	ForbearanceFriar = 663; // 隐忍修士

	
	HalfrawEnchantress = 664; // 半熟妖姬

	
	Jammer = 665; // 干扰机

	
	TravelingSinger = 666; // 云游歌姬

	
	RubbishWarlock = 667; // 秽土术士

	
	DesperateGeneral = 668; // 决死大将

	
	BrightAngel = 669; // 光明天使

	
	WhenTheBride = 670; // 时之魔女

	
	NightButterfly = 671; // 夜冥蝶

	
	FoldoverCriminal = 672; // 叠影怪盗

	
	BloodWarrior = 673; // 热血武道家

	
	BanefulOfferings = 674; // 荼毒祭品

	
	PatrolCaptain = 675; // 巡逻队长

	
	DarkHallGuard = 676; // 暗堂守卫

	
	LightDuplicator = 677; // 重光叠影师

	
	VirtuosityCaptain = 678; // 炫技机长

	
	LohanWolf = 679; // 罗汉狼

	
	SwiftHunter = 680; // 迅捷猎手

	
	Chupacabra = 681; // 吸血怪

	
	MidnightPatrol = 682; // 午夜巡逻员

	
	DungeonCatcher = 683; // 地牢捕手

	
	ChangeWolfArtist = 684; // 变狼艺人

	
	DyingGhost = 685; // 弥留老鬼

	
	ColdSteelChains = 686; // 寒钢锁链

	
	HamsterCalled = 687; // 仓鼠召唤

	
	Invisibility = 688; // 隐身术

	
	BlessingSilvermoon = 689; // 银月祝福

	
	OnGrainArmor = 690; // 月纹铠甲

	
	ComeToMe = 691; // 来我身边

	
	Assassinations = 692; // 连环暗杀

	
	ChangedLiving = 693; // 大变活人

	
	TeleportationCircle = 694; // 传送阵

	
	YaoAllTheLight = 695; // 耀众之光

	
	NoxiousRevival = 696; // 恶毒复生

	
	MoonringMirror = 697; // 月轮明镜

	
	BloodMoon = 698; // 腥红之月

	
	MoonlightBeetle = 699; // 月光甲虫

	
	Kaguya = 700; // 月姬

	
	EatMagicHamster = 701; // 食魔仓鼠

	
	Stargazer = 702; // 占星官

	
	ST8001 = 8001; // 飞鼠

	
	ST8002 = 8002; // 白羽巫师

	
	ST8003 = 8003; // 复仇之翼

	
	ST8004 = 8004; // 八爪海巫

	
	ST8101 = 8101; // 村民

	
	ST8102 = 8102; // 酒保

	
	ST8103 = 8103; // 盗贼

	
	ST8104 = 8104; // 驯马女杰

	
	ST8105 = 8105; // 胆小鬼

	
	ST8106 = 8106; // 村长

	
	ST8107 = 8107; // 大野狼

	
	ST8108 = 8108; // 侍卫

	
	ST8109 = 8109; // 双面间谍

	
	ST8110 = 8110; // 守城盾兵

	
	ST8111 = 8111; // 守城枪兵

	
	ST8112 = 8112; // 守城军官

	
	ST8113 = 8113; // 公主

	
	ST8114 = 8114; // 老流氓

	
	ST8115 = 8115; // 强盗

	
	ST8116 = 8116; // 恶匪

	
	ST8117 = 8117; // 葬仪妖婆

	
	ST8118 = 8118; // 小女孩

	
	ST8119 = 8119; // 藤蔓怪

	
	ST8120 = 8120; // 勇者卫兵

	
	ST8121 = 8121; // 狼王

	
	ST8122 = 8122; // 夜行狼

	
	ST8123 = 8123; // 刺客

	
	ST8124 = 8124; // 黑袍杀手

	
	ST8125 = 8125; // 刀锋领主

	
	ST8126 = 8126; // 总督

	
	ST8127 = 8127; // 骑士

	
	ST8128 = 8128; // 狂狮战将

	
	ST8129 = 8129; // 阴谋家

	
	ST8130 = 8130; // 狼勇士

	
	ST8131 = 8131; // 狼祖

	
	ST8132 = 8132; // 狼女王

	
	ST8133 = 8133; // 白狼王

	
	ST8134 = 8134; // 狼先知

	
	ST8135 = 8135; // 爪牙

	
	ST8136 = 8136; // 幽灵狼

	
	ST8137 = 8137; // 梦魇狼

	
	ST8138 = 8138; // 雪狼

	
	ST8139 = 8139; // 人鱼歌者

	
	ST8140 = 8140; // 深海水妖

	
	ST8141 = 8141; // 执法狮鹫

	
	ST8142 = 8142; // 狼卫兵

	
	ST8143 = 8143; // 侍卫

	
	ST8144 = 8144; // 勇者卫兵2

	
	ST8145 = 8145; // 村民

	
	ST8146 = 8146; // 狼力士

	
	Teach485 = 485; // 花猫婆婆

	
	Teach486 = 486; // 酒馆女侍

	
	Teach487 = 487; // 酒鬼

	
	Teach488 = 488; // 捕狼勇士

	
	Teach489 = 489; // 雇佣兵

	
	Teach7001 = 7001; // 强盗

	
	Teach7002 = 7002; // 狼力士

	
	HeroWolfN = 9000; // 晚上村庄hero,客户端写法限制了CGRoleID不能大于9999

	
	HeroWolfD = 9001; // 白天村庄hero,客户端写法限制了CGRoleID不能大于9999

	
	HeroWolfDEx = 9002; // 潜伏者村庄+

	
	RangerHeroD = 9003; // 游侠村庄

	
	RangerHeroDEx = 9004; // 游侠村庄+

	
	BlackGownHeroD = 9005; // 黑袍会村庄

	
	BlackGownHeroDEx = 9006; // 黑袍会村庄+

	
	KingdomHeroD = 9007; // 贵族村庄

	
	KingdomHeroDEx = 9008; // 贵族村庄+

	
	MasterHeroD = 9009; // 法师村庄

	
	MasterHeroDEx = 9010; // 法师村庄+

	
	SpiritTempleHeroD = 9011; // 圣灵殿村庄

	
	SpiritTempleHeroDEx = 9012; // 圣灵殿村庄+

	
	TraderTradeD = 9013; // 通商

	
	HeroWolfCp1 = 9501; // 英雄白狼

	
	HeroWolfCp2 = 9502; // 英雄焦虑的失眠者

	
	HeroWolfCp3 = 9503; // 英雄焦虑的村民

	
	HeroWolfOutI = 9504; // 英雄之出局I

	
	HeroWolfOutII = 9505; // 英雄之出局II

	
	HeroWolfDevilDoor = 9506; // 恶魔之门

	
	HeroWolfDevilPaw = 9507; // 恶魔之爪

	
	HeroWolfCp4 = 9508; // 英雄白狼+

	
	FakeWolf1 = 2001; // 伪装狼1

	
	FakeWolf2 = 2002; // 伪装狼2

	
	FakeWolf3 = 2003; // 伪装狼3

	
	FakeWolf4 = 2004; // 伪装狼4

	
	GuessMan1 = 2005; // 质疑村民1

	
	GuessMan2 = 2006; // 质疑村民2

	
	HeroPiousFaith = 9611; // 虔诚信仰

	
	HeroRepentBlade = 9612; // 忏悔之刃

	
	RoyalRecruiting = 9613; // 皇家招募

	
	BanishDecree = 9614; // 放逐敕令

	
	MagicSpring = 9615; // 魔力之泉

	
	VacantClaw = 9616; // 虚空之爪

	
	Reclusion = 9617; // 隐藏

	
	Zkill = 9618; // Z字杀

	
	HeroWolfNX = 9619; // 狼刃

	
	HeroExpose = 9620; // 曝光

	
	CarnivalXysyHeroExpose = 10300; // 狂欢曝光

	
	CarnivalXysyRole1 = 10301; // 狂欢神牌1

	
	CarnivalXysyRole2 = 10302; // 狂欢神牌2

	
	CarnivalXysyRole3 = 10303; // 狂欢神牌3

	
	CarnivalXysyRole4 = 10304; // 狂欢神牌4

	
	HeroZero = 20001; // 空技能

	
	oldInfestor = 9701; // 旧感染者

	
	oldRichMan = 9702; // 旧大富翁

	
	oldVillageConvener = 9703; // 旧征召旗手

	
	oldHideRobber = 9704; // 旧魔术师

	
	oldFindWolfVillager = 9705; // 旧驯犬老人

	
	oldMakeTroubleVillager = 9706; // 旧侦查民兵

	
	oldGiveWingsAngel = 9707; // 旧赐翼天使

	
	oldTimeMagician = 9708; // 旧混沌使者

	
	oldPrince = 9709; // 旧王子

	
	oldThreeBrothers1 = 9710; // 旧三兄弟-老大

	
	oldThreeBrothers2 = 9711; // 旧三兄弟-老二

	
	oldMagicSwallower = 9712; // 旧大魔导士

	
	oldSwordsmanZero = 9713; // 旧疾风游侠

	
	oldWolf102 = 9714; // 旧狼祭司

	
	oldWolf103 = 9715; // 旧狼女王

	
	oldChangeFaceMan = 9716; // 旧神之假面

	
	oldVillagerMask = 9717; // 旧民之假面

	
	oldWolfMask = 9718; // 旧狼之假面

	
	oldFanatic = 9719; // 旧痛苦亡徒

	
	OldTest1 = 5001; // 旧卡牌标记

	
	OldTest2 = 5002; // 旧卡牌标记

	
	OldTest3 = 5003; // 旧卡牌标记

	
	OldTest4 = 5004; // 旧卡牌标记

	
	OldTest5 = 5005; // 旧卡牌标记

}

// Defined in table: GlobalsType
enum CGCardType
{	

	
	InvalidCard = 0; // 无效卡

	
	WolfCard = 1; // 狼人卡

	
	RoleCard = 2; // 身份卡

	
	VillagerCard = 3; // 村民卡

	
	HeroCard = 4; // 英雄卡

	
	NewMoonCard = 5; // 新月卡

	
	EffectCard = 6; // 效果卡

	
	SpyCard = 7; // 间谍牌

	
	DisasterCard = 8; // 灾难牌

	
	AllCard = 777; // 所有卡,卡牌筛选以及任务上使用

}

// Defined in table: GlobalsType
enum CGCardSubTyp
{	

	
	CardSubTypInvalid = 0; // 无效子类型

	
	HeroCardSubDay = 41; // 英雄卡子类白天英雄

	
	HeroCardSubNight = 42; // 英雄卡子类黑夜英雄

	
	NewMoomSubDream = 43; // 新月卡子类梦游者

	
	MergeCard = 44; // 狼人卡(村民卡、神职卡等)-合体牌

}

// Defined in table: GlobalsType
enum CGRoleQuality
{	

	
	QualityInvalid = 0; 

	
	QualityAll = 1; // 所有品质

	
	QualityNormal = 2; // 普通

	
	QualityRare = 3; // 稀有

	
	QualityEpic = 4; // 史诗

	
	QualityLegend = 5; // 传奇

}

// Defined in table: GlobalsType
enum CGRoleSeries
{	

	
	SeriesInvalid = 0; 

	
	SeriesAll = 1; // 所有系列

	
	DarkDusk = 2; // 暗潮黄昏

	
	MoonLegend = 3; // 月圆传说

	
	FirstExpansion = 4; // 扩展包1

	
	Teaching = 5; // 教学模式

	
	SecondExpansion = 6; // 扩展包2

	
	ThirdExpansion = 7; // 扩展包3

}

// Defined in table: GlobalsType
enum CGSpellID
{	

	
	InvalidCGSpellID = 0; 

	
	Uncover = 1; // 查验身份

	
	WerewolfAttack = 2; // 狼刀

	
	Guess = 3; // 猜测

	
	Vote = 4; // 投票

	
	Guard = 5; // 守卫盖回

	
	Poison = 6; // 女巫毒药

	
	CoverGuard = 28; // 掩护的守卫

	
	OveraweHunterSpell = 29; // 潜行者技能

	
	MakeTroubleIdiotSpell = 33; // 捣蛋鬼

	
	MakeTroubleVillagerSpell = 41; // 民兵斥候

	
	EverShieldSpell = 42; // 说明：需要特殊处理的根据配置定义id 永久圣盾

	
	EverCDSpell = 43; // 永久CD

	
	ShieldSpell = 45; // 圣盾

	
	NotRoar = 49; // 不咆哮的熊

	
	HideRobberSpell = 51; // 隐匿的盗贼

	
	JusticeMixedBloodSpell = 54; // 混血儿技能

	
	CopyVillagerSpell = 61; // 描摹者技能

	
	ExCoverGuard = 76; // 掩护的守卫+

	
	ExOverawe = 77; // 威慑的猎人+

	
	ExMakeTroubleIdiotSpell = 81; // 捣蛋鬼+

	
	MustOnSpell = 82; // 固有技能

	
	KingWolfSpell = 96; // 爪牙技能

	
	DangerBomberSpell = 97; // 老流氓技能

	
	JusticeKnightSpell = 100; // 角斗士技能

	
	InsomniacSpell = 101; // 失眠者技能

	
	DrunkardSpell = 104; // 酒鬼技能

	
	WerewolfAttackCp1 = 113; // 白狼

	
	WerewolfAttackCp2 = 114; // 焦虑的失眠者技能

	
	WerewolfAttackCp3 = 115; // 焦虑的村民技能

	
	PsychicSpell = 125; // 通灵技能

	
	ExposeSelfSpell = 134; // 自曝

	
	WarlockSpell = 135; // 术士

	
	Wolf102Spell = 149; // 狼祭司技能

	
	Wolf104Spell = 151; // 隐狼技能

	
	ExWolfQueenSpell = 154; // 狼女王+技能id

	
	ObstructKillSpell = 157; // 翻开挡刀

	
	MaskWolfSpell = 162; // 上阵时,获得伪装.

	
	VillageElderSpell = 167; // 村庄长老技能

	
	InMouthIdiotSpell = 170; // 插嘴白痴技能

	
	ScapegoatSpell = 173; // 替罪羊技能

	
	MoonForeseeSpell = 178; // 新月预言技能

	
	MoonShootSpell = 179; // 新月开枪技能

	
	MoonGuardSpell = 180; // 新月守护技能

	
	DreamerFiberSpell = 181; // 梦游者-纤维技能

	
	DreamerFutureSpell = 182; // 梦游者-未来技能

	
	DreamerShapeSpell = 183; // 梦游者-变形技能

	
	DreamerChaosSpell = 184; // 梦游者-混沌技能

	
	AssassinSpell2 = 186; // 刺客技能2

	
	FlamenSpell = 189; // 祭司技能

	
	ErodeOfferSpell = 193; // 猩红契约技能

	
	AvatarGhostSpell = 195; // 化身幽灵技能

	
	GravediggerSpell = 196; // 掘墓人技能

	
	DevilPawSpell = 198; // 恶魔之爪

	
	ThumbelinaSpell = 204; // 女祭司（拇指姑娘）技能

	
	RepentBlade = 211; // 忏悔之刃

	
	WerewolfAttackCp4 = 212; // 狼兄弟+

	
	PatrolSpell = 213; // 巡逻

	
	LifeguardSpell = 217; // 禁卫军

	
	ChariotSpell = 219; // 战车

	
	QueenSpell = 222; // 皇后

	
	KingEntry = 223; // 国王入场

	
	KingSummon = 224; // 皇家招募

	
	WolfBanishDecree = 225; // 放逐

	
	BacktracerSpell = 233; // 回溯者技能

	
	MagicSwallowerSpell = 234; // 魔法吞噬者技能

	
	TotemWolfSpell = 239; // 图腾狼

	
	ObedientMaidSpell = 243; // 顺从的女仆

	
	ExecutePoliceSpell = 244; // 执警

	
	GargoyleSpell = 246; // 石像鬼

	
	CupidLoverSpell = 249; // 丘比特lover技能

	
	ThreeBrothers1Spell = 251; // 三兄弟-老大

	
	ThreeBrothers3Spell = 252; // 三兄弟-老三

	
	NightmareMoonSpell = 255; // 梦魇

	
	PigGodSpell = 262; // 盾战士技能

	
	BlackMapSpell = 265; // 黑市地图技能

	
	SagacityCaneSpell = 268; // 智慧杖

	
	TrueBlackMapSpell = 270; // 藏宝地图

	
	MagicWandSpell = 273; // 神圣法杖

	
	ElderSisterSpell = 274; // 两姐妹-姐姐技能

	
	LittleSisterSpell = 275; // 两姐妹-妹妹技能

	
	GypsygirlSpell = 276; // 吉卜赛女

	
	ImmortalShieldExSpell = 277; // 不朽盾附加技能

	
	ExcaliburExSpell = 278; // 圣剑附加技能

	
	FestivalHostedSpell = 292; // 祭典主持技能

	
	SwordsmanZeroSpell = 295; // 疾风游侠技能

	
	ReclusionSpell = 296; // 激励技能

	
	ZKillSpell = 297; // Z字杀技能

	
	OblationPortalSpell = 298; // 祭品传送门技能

	
	DevourerSpell1 = 299; // 噬元兽技能1

	
	ExDevourerSpell2 = 300; // 噬元兽+技能2

	
	MinstrelSpell = 301; // 吟游诗人技能

	
	CopyResearcherSpell = 302; // 复制研究员技能

	
	GuideManSpell = 303; // 引路人技能

	
	SampleClerkSpell = 304; // 样本储存员技能

	
	IdeaProjectionManSpell = 305; // 意念投影师技能

	
	AwakeningPeopleSpell = 306; // 觉醒者技能

	
	PoisonSpell = 311; // 蛊毒技能

	
	TombWatcherLastWordSpell = 312; // 守墓人遗言技能

	
	ProbationHunterSpell = 315; // 见习猎手技能

	
	HotCookerSpell = 316; // 热情厨师技能

	
	TravelBoySpell = 317; // 游历少年技能

	
	BabyGiantSpell = 318; // 恐狼巨人技能

	
	WeaponTraderSpell = 319; // 武器商人技能

	
	JordanSpell = 320; // 旅店老板技能

	
	WolfSeekerSpell = 321; // 寻狼大师技能

	
	FightingCockSpell = 322; // 好斗剑痴技能

	
	IntelligenceBirdSpell = 332; // 情报网伊鸟技能

	
	AvigatorEgretSpell = 333; // 领航员白鹭技能

	
	BazaSpidenSpell = 334; // 八爪蜘蛛技能

	
	ParrotSpell = 335; // 学舌者鹦鹉技能

	
	CodeExposureSpell = 337; // 代号曝光技能

	
	ExGravediggerSpell = 341; // 掘墓人+技能

	
	DevourerSpell2 = 343; // 噬元兽技能2

	
	FlySpell = 344; // 飞行

	
	PeckWookSpell = 345; // 啄木

	
	NotRoarBearSpell = 348; // 天使

	
	SorceressSpell = 355; // 女巫的技能

	
	QuartermasterSpell = 361; // 军需官技能

	
	FidelityGuardSpell = 362; // 忠诚卫士技能

	
	AggressiveFighterSpell = 364; // 好斗拳手技能

	
	RecruitingAgentSpell = 367; // 征兵员技能

	
	ScavengerWolfSpell = 371; // 食腐狼技能

	
	RevengeWolfSpell1 = 372; // 复仇狼技能1

	
	MagicSwallowerSpell2 = 385; // 魔法吞噬者技能2

	
	BlackGownHeroDSpell = 389; // 黑袍会村庄

	
	BlackGownHeroDExSpell = 390; // 黑袍会村庄+

	
	PreventWolfKillSpell = 408; // 狼刀保护技能

	
	PardonerSpell = 410; // 圣印使技能

	
	BestowManSpell = 411; // 恩赐者技能

	
	NailSpell = 435; // 钉子技能

	
	SecretSelectSpell = 437; // 秘密选择技能

	
	OctoFeelersSpell = 441; // 八爪章鱼技能

	
	KillSecretSelSpell = 442; // 杀死秘密选择技能

	
	HeroExposeSpell = 444; // 曝光技能

	
	HeroWolfNXSpell = 446; // 狼刃技能

	
	WhisperTalesSpell = 450; // 细语告密客技能

	
	FirstBloodSpell = 451; // 第一滴血技能

	
	SecondBloodSpell = 452; // 第二滴血技能

	
	SkyPunishSpell = 455; // 天罚技能

	
	FalconSpell = 456; // 猎鹰技能

	
	ThreeBrothers2Spell = 461; // 三兄弟-老二技能

	
	DovePioneerSpell = 462; // 白鸽先锋技能

	
	LordBlackCoffinSpell = 463; // 黑棺魔王技能

	
	GospelManSpell = 464; // 福音师技能

	
	kingBloodDescendantSpell = 465; // 王血传人技能

	
	WolfShadowManSpell = 466; // 狼影者技能

	
	ThiefMasterSpell = 467; // 神偷技能

	
	RegressSpell = 471; // 回归技能

	
	ChargeCaptainSpell = 478; // 冲锋队长技能

	
	PrayersSpell = 481; // 祈福师技能

	
	PurgatorySpell = 489; // 赎罪券贩子技能

	
	HunterWoodSpell = 509; // 森林伏击手技能

	
	SacrificialSupervisorSpell = 510; // 献祭监工技能

	
	GateManagerSpell = 512; // 城门管理者技能

	
	MilitiaCommanderSpell = 521; // 民兵长技能

	
	VampireSpell = 522; // 吸血鬼技能

	
	HospitableUsherSpell = 528; // 好客招待员技能

	
	RoaringKingSpell = 529; // 咆哮之王技能

	
	BraveShieldSpell = 532; // 盾之勇者技能

	
	ArmoredWarriorSpell = 538; // 盔甲武士技能

	
	ControlWolfSpell = 552; // 魅惑狼技能

	
	CerberusAttackSpell = 559; // 双头巨人攻击技能

	
	CerberusCheckSpell = 600; // 双头巨人探查技能

	
	FastGunmanSpell = 603; // 快枪手技能

	
	CountessSpell = 609; // 女伯爵技能

	
	CouncilOrganizerSpell = 610; // 议会组织者技能

	
	VillagerHeirsSpell = 611; // 村民继承者

	
	GraveLordSpell = 613; // 墓穴领主

	
	BerserkerSpell = 616; // 狂暴战士

	
	TreasureExplorationSpell = 624; // 宝藏探险

	
	GrandmaWolfSpell = 634; // 狼外婆

	
	LittleRedSpell = 635; // 小红帽

	
	GenieAutoSpell = 636; // 灯神被动技能

	
	DisasterCard2Spell = 638; // 末日之握技能

	
	DisasterCard3Spell = 639; // 冥界窥视技能

	
	CarnivalXysyHeroExposeSpell = 640; // 狂欢曝光

	
	UnstableWaterElementSpell = 641; // 不稳定水元素

	
	UnstableFireElementSpell = 642; // 不稳定火元素

	
	BookSellerSpell = 649; // 书店老板

	
	WolfHaterSpell = 652; // 仇狼富豪

	
	BriberSpell = 660; // 行贿者

	
	EvilBMSpell = 666; // 行贿者

	
	SacrificeWolfSpell = 802; // 献祭狼

	
	ThreePartiesWolfSpell = 808; // 三头狼

	
	HollowSpell = 811; // 虚空

	
	ColorfulDarkWolfSpell = 812; // 五彩暗黑狼

	
	WakefulSpell = 813; // 不眠

	
	BanishWolfSpell = 818; // 放逐狼技能

	
	CaressWolfDeaconSpell = 827; // 抚狼执事技能

	
	PatCatGuardSpell = 828; // 撸猫城尉技能

	
	Disaster4nyxlSpell = 832; // 奴役心灵技能

	
	Disaster6hhmsSpell = 834; // 换魂秘术技能

	
	Disaster7yyzySpell = 835; // 月圆之夜技能

	
	Disaster10gyssSpell = 838; // 鬼影闪烁技能

	
	CavesWolfSpell = 839; // 穴居狼技能

	
	LurkWolfSpell = 840; // 潜伏狼技能

	
	AssassinateWolfSpell = 842; // 暗杀狼技能

	
	TreeHoleGiantSpell = 844; // 树洞巨人技能

	
	IllusionWolfSpell = 852; // 幻术狼技能

	
	BazaarDispatcherSpell = 856; // 集市调度官技能

	
	IllusionWolfLastWordSpell = 859; // 幻术狼遗言技能

	
	FlyingSickleHandSpell = 860; // 飞镰手技能

	
	TrickeryStaffSpell = 862; // 诡术参谋技能

	
	ForbearanceFriarSpell = 863; // 隐忍修士技能

	
	TravelingSingerSpell = 866; // 云游歌姬技能

	
	BrightAngelSpell = 869; // 光明天使技能

	
	NightButterflySpell = 871; // 夜冥蝶技能

	
	Wolf103Spell = 880; // 狼103技能

	
	ChangeWolfArtistSpell = 885; // 变狼艺人技能

	
	ExSeedSpiritShield = 1006; // 牺牲自己加护盾

	
	DiceGamblerSpell = 1017; // 黑骰赌徒

	
	ExDiceGamblerSpell = 1018; // 黑骰赌徒+

	
	HeroBoss3NightSpell = 1022; // boss3主动-收回筹码

	
	HeroBoss4Night1Spell = 1029; // boss4主动-反弹I

	
	TurnedUpOffHandSpell = 1020; // 将用技能把自己翻开的卡牌移回牌库

	
	HeroBoss4Night2Spell = 1030; // boss4主动-反弹II

	
	HeroBoss5Night1Spell = 1049; // boss5主动-狂怒I

	
	HeroBoss5Night2Spell = 1050; // boss5主动-狂怒II

	
	CommonPkCheck = 10000; // 通用技能侦查

	
	CommonPkAttack = 10001; // 通用技能攻击

}

// Defined in table: GlobalsType
enum CGSpellType
{	

	
	InvalidSpell = 0; // 无效技能类型

	
	ActiveSpell = 1; // 主动技能类型

	
	HelpSpell = 2; // 救助技能类型

	
	DeathSpell = 3; // 死亡技能类型

	
	OnBoardSpell = 4; // 上阵技能类型

	
	BackgroundSpell = 5; // 后台技能类型

	
	STMustOn = 6; // 固有技能类型

	
	TurnUpSpell = 7; // 翻开触发技能类型

	
	MarkLostSpell = 8; // 失去标记触发类型

}

// Defined in table: GlobalsType
enum AdventureMode
{	

	
	InvalidMode = 0; // 无效的关卡模式

	
	RegularMode = 1; // 常规关卡

	
	BossMode = 2; // 头目关卡

	
	GuideMode = 3; // 引导关卡

}

// Defined in table: GlobalsType
enum PresentType
{	

	
	InvalidPresent = 0; // 无效礼品类型

	
	Flower = 1; // 送花

	
	Car = 2; // 送

	
	Egg = 3; // 送

	
	Kiss = 4; // 送

	
	Eardrop = 5; // 送

	
	Ring = 6; // 送

	
	Necklace = 7; // 送

	
	Crown = 8; // 送

	
	Castle = 9; // 送

}

// Defined in table: GlobalsType
enum RoomModeType
{	

	
	RMInvalid = 0; // 非法模式

	
	RMCardv2Mp = 63; // 娱乐模式

	
	RMCardRankv2Mp = 64; // 天梯模式

	
	RMCardv2ForGuide = 66; // 入会考核

	
	RMCardv2Friends = 67; // 好友约战

	
	RMCardv2Guild = 68; // 公会约战

	
	RMCardSpecialCarnival = 70; // 活动玩法之狂欢模式

	
	RMCardv2Race = 71; // 竞技场模式

	
	RMAdventureRegular = 72; // 冒险模式常规模式

	
	RMAdventureBoss = 73; // 冒险模式boss模式

	
	RMCardv2Train = 74; // 单机练习模式

	
	RMCardv2TrainChallenge = 75; // 单机练习挑战模式

	
	RMCardV2CarnivalBRFB = 76; // 白日风暴

	
	RMStrengthenTraining = 77; // 历练模式

	
	RMCardv2League = 78; // 联赛模式

	
	RMCardV2CarnivalLeague = 79; // 狂欢战略联盟模式

	
	RMCardV2Compete = 80; // 官方赛事模式

	
	RMDdz = 81; // 斗地主模式

	
	RMCarnivalXYSY = 82; // 狂欢-血月盛宴

	
	RMNoviceGuide = 83; // 新手教学 新手4关的第 3 4关

	
	RMFirstNovice = 84; // 休闲模式新手阶段第一场使用 新手场首场

}

// Defined in table: GlobalsType
enum SpellFeature
{	

	// 法术共鸣
	SpellResonate = 0; 

	// 光环
	SpellAura = 1; 

	// 飞行
	SpellFly = 2; 

	// 遗言
	SpellLastWords = 3; 

	// 伏击
	SpellFj = 4; 

}

// Defined in table: GlobalsType
enum EthnicType
{	

	// 中立
	EthnicNeutra = 0; 

	// 王国
	EthnicKingdom = 1; 

	// 白鸽盟
	EthnicRanger = 2; 

	// 黑袍会
	EthnicBlackGown = 3; 

	// 圣灵殿
	EthnicSpiritTemple = 4; 

	// 无序塔
	EthnicMaster = 5; 

	// 潜伏社
	EthnicLurker = 6; 

	// 商人
	EthniTrader = 7; 

	// xxx
	EthnicAll = 777; // 所有种族，种族筛选以及任务配置使用

}

// Defined in table: GlobalsType
enum LadderLevelType
{	

	
	LadderLvBrass = 0; // 黄铜

	
	LadderLvSilver = 1; // 白银

	
	LadderLvGold = 2; // 黄金

	
	LadderLvPlatinum = 3; // 铂金

	
	LadderLvDiamond = 4; // 钻石

	
	LadderLvLegend = 5; // 传奇

	
	LadderLvKing = 6; // 狼王

}

// Defined in table: GlobalsType
enum PKMode
{	

	
	PKMNormal = 0; // 普通模式

	
	PKMLostLimit = 1; // 限制负场

	
	PKMTotalLimit = 2; // 限制场次

}

// Defined in table: GlobalsType
enum TaskType
{	

	
	InvalidTask = 0; // 无效任务类型

	
	RechargeTask = 12; // 充值任务(首充)

	
	CommonRechargeTask = 13; // 普通充值任务

	
	EveryDayMedal = 14; // 每日勋章(勋章)

	
	EveryWeekMedal = 15; // 每周勋章(勋章)

	
	AchieveCollectTask = 18; // 成就收集任务(成就)

	
	AchieveTrainTask = 19; // 成就训练任务(成就)

	
	AchieveFightTask = 20; // 成就战斗任务(成就)

	
	LadderTask = 21; // 排位任务

	
	CardHelpTask = 22; // 词条、灵活教学任务

	
	RoomModeTask = 24; // 房间模式任务

	
	TrainMissionTask = 25; // 模式关卡任务

	
	WolfKingWeekTask = 26; // 狼王令每周任务

	
	BuyRightTask = 27; // 商品购买权任务

	
	Activity7DayTask = 28; // 活动七日狂欢任务

	
	ActivityCycleTask = 29; // 活动日循环任务

	
	ActivityCommonTask = 30; // 活动普通任务

	
	FresherTask = 31; // 曙光任务

	
	FresherParentTask = 32; // 曙光母任务

	
	ActivityFiniCycleTask = 33; // 活动自动循环任务

	
	RebateActivityParentTask = 35; // 返利活动母任务

	
	RebateActivityTask = 36; // 返利活动子任务

	
	KeepWelfareTask = 37; // 投放卡牌福利任务

	
	DDZModeTask = 38; // 斗地主模式任务

	
	MultiProcTask = 100; // 多进程任务(勋章)

	
	QALikeTask = 101; // 类似问卷任务
	
	MilestoneTask = 102; //新里程碑任务

}

// Defined in table: GlobalsType
enum TaskFiniConType
{	

	
	InvalidFC = 0; // 无效任务条件id

	
	EveryDayLogin = 1; // 登录天数达到N天（刚接任务时，默认为1天）

	
	FiniXModeGameNCnt = 2; // 进行x模式游戏n局(支持所有房间模式)

	
	WinXModeGameNCnt = 3; // 进行x模式游戏胜利n局(支持所有房间模式)

	
	LoseXModeGameNCnt = 4; // 进行x模式游戏失败n局(支持所有房间模式)

	
	DrawXModeGameNCnt = 5; // 进行x模式游戏平局n局(支持所有房间模式)

	
	UseXCategoryXIdItemNCnt = 6; // 使用x道具达到n件

	
	InXModeUseXCardAttackXCardNCnt = 7; // 在x模式使用x角色攻击x角色达到n次

	
	InXModeUseXCardRescueXCardNCnt = 8; // 在x模式使用x角色救助x角色达到n次

	
	InXModeUseXCardRespawnXCardNCnt = 9; // 在x模式使用x角色复活x角色达到n次

	
	InXModeUseXCardKillXCardNCnt = 10; // 在x模式使用x角色击杀x角色达到n次

	
	InXModeUseXCardXSkillNCnt = 11; // 在x模式使用x角色的x技能达到n次

	
	GainXCategoryXIdItemNCnt = 12; // 获得x道具达到n数量

	
	UseXMoneyNCnt = 13; // 消耗x代币达到n数量

	
	GainXMoneyNCnt = 14; // 获得x代币达到n数量

	
	LadderRankX = 16; // 最近最新赛季的天梯段位大于等于X

	
	C_FriendsNCnt = 17; // 现有好友数量达到n

	
	ShareNCnt = 18; // 分享次数达到n

	
	C_TypeXCardsNCnt = 19; // 当前拥有x类别（对应本表CGCardType）的卡牌数量达到n张

	
	C_SkinsNCnt = 20; // 当前拥有皮肤数量达到n

	
	InXModeWithCardXWinNCnt = 21; // 在x模式中卡组中包含x角色获得n场胜利

	
	InXModeWithCardXFiniNCnt = 22; // 在x模式中卡组中包含x角色进行n场游戏

	
	InXModeWinAfterXDays = 23; // 在x模式的一局游戏中在x天数之上赢得胜利

	
	InXModeWinBeforeXDays = 24; // 在x模式的一局游戏中在x天数之前赢得胜利

	
	InXModeWithCardXLoseNCnt = 25; // 在x模式中卡组中包含x角色进行n场失败

	
	InXModeKillXCardNCnt = 26; // 在x模式击杀x角色累计n次

	
	JoinGuild = 27; // 加入公会

	
	C_HaveXCategoryXIdNCnt = 29; // 现在拥有X类X编号的道具数量达到N个

	
	CondRechargeNRmb = 30; // 充值数量(举例：1元就是配100)

	
	C_LadderLvUpgradeN = 31; // （接取时会判断）当前赛季天梯升到n级

	
	InXModeStreakWinNCnt = 33; // 在x模式完成n局连胜(支持所有房间模式)

	
	GainXCategoryItemNCnt = 34; // 获得x类型的道具数量达到n

	
	GainXCategoryCardNCnt = 35; // 获得x类别的卡牌n张

	
	InXModeKillXCategoryCardNCnt = 37; // 在x模式击杀x类别(对应本表的CGCardType类型)卡牌n次

	
	UseXMoneyPurchaseNCnt = 38; // 使用x货币在商城购买n次数; 钻石1,金币2,公会贡献5

	
	OverXLevel = 39; // 等级达到(>=)x级

	
	OneTimeRechargeOverXRmb = 40; // 一次充值rmb(>=)x(举例：1元就是配100)

	
	CompleteAdventureXMissionIdNCnt = 42; // 通过【指定关卡】的PVE模式N次

	
	ArenaXWinChest = 43; // 竞技模式获得过【指定胜场x】的奖励宝箱

	
	C_LadderHistoryMaxLvN = 102; // 历史最高段位达到【N段位】          《赋值型》

	
	C_InCurRaceRoundWinNCnt = 103; // 在当前竞技场轮次内胜利N场

	
	InXModeStreakLoseNCnt = 104; // 在x模式完成x局连败(支持所有房间模式)

	
	ContinuousloginNCnt = 105; // 连续登录天数达到【指定天数】

	
	GainXTypeDiffNewCardNCnt = 106; // 获得了【指定数量】的【指定类别（可多选）】的不同卡牌(新卡牌)

	
	GainXTypeCardNCnt = 107; // 获得了【指定数量】的【指定类别（可多选）】的卡牌

	
	GainXTypeExCardNCnt = 108; // 获得了【指定数量】的【指定类别（可多选）】的强化卡牌

	
	DecomXTypeCardNCnt = 109; // 分解了【指定数量】的【指定类别（可多选）】的卡牌

	
	C_TodayOnLineTimeNSec = 110; // 当前的日在线时长n秒

	
	LoginNDay = 111; // 登录天数达到N天（刚接任务时，默认为0天）

	
	ComXTypeDiffCardNCnt = 112; // 合成了[X]类型（可多选）的不同卡牌N张

	
	ComXQualityDiffCardNCnt = 113; // 合成了[X]稀有度（可多选）的不同卡牌N张

	
	GainXQualityDiffNewCardNCnt = 114; // 获得了【X】稀有度（可多选）的不同卡牌(新卡牌)N张

	
	GainXQualityCardNCnt = 115; // 获得了【X】稀有度（可多选）的卡牌N张

	
	GainXQualityDiffExNewCardNCnt = 116; // 获得了【X】稀有度（可多选）的不同强化卡牌N张

	
	DecomXQualityCardNCnt = 117; // 分解了【X】指定稀有度（可多选）的卡牌N张

	
	XChannelChatNCnt = 118; // 进行【X】频道聊天N次

	
	C_HistoryOneRaceRoundWinNCnt = 119; // 历史单次竞技模式内最高达到了【指定胜场】   《赋值型》

	
	C_RegistNDay = 120; // 注册天数达到N天，《赋值型》线上的零点更新一次 以及登录时更新一次

	
	FinishXHelpMission = 121; // 3.56版本 完成【指定id（可多选）】的情景教学关卡(相关任务已删除3.64版本..)

	
	XmodeLeftOneWolfWinNCnt = 122; // 3.56版本 【指定模式（可多选）】己方剩下最后一头狼人并且获胜【n】局

	
	XmodeKillWolfbyKnifeWinNCnt = 123; // xx模式使用狼刀杀死对面所有狼人并获胜n次

	
	XmodeXdayWinNCnt = 124; // xx模式n天内获得胜利n次

	
	XmodeXethnicWinNCnt = 125; // xx模式使用xx种族套牌获胜n次

	
	XModeOnlyGodAndWolfWinNCnt = 126; // xx模式只使用神牌和狼牌获胜n次

	
	XmodeOnlyCivilAndWolfWinNCnt = 127; // xx模式只使用民牌和狼牌获胜n次

	
	XMode1DayKillXCardTypXCnt = 128; // 【指定模式（可多选）】1天内（白天2回合加晚上1回合）击杀【指定卡牌类型】【指定数量】张牌

	
	XMode1DayKillXCardIDXCnt = 129; // 【指定模式（可多选）】1天内击杀【指定卡牌id】【指定数量】张牌

	
	XModeCardXPkValueWinNCnt = 130; // 【指定模式（可多选）】某张卡牌信用点上限超过【N】点并获胜的次数

	
	XSeasonXEthnicXWRateXWin = 131; // 【指定赛季（可多选）】【指定职业套牌（可多选）】套牌的所有胜率均超过【x%】，并且单职业对局数超过【x】局

	
	XModeCardActiveTurnUpXTimes = 132; // 【指定模式（可多选）】一局中相同的卡牌主动翻开次数达到过【x】

	
	XModeXLiveWolfWinNCnt = 133; // 【指定模式（可多选）】一局中狼人存活数量超过【x】并获得胜利x次

	
	XModeCompleteNCnt = 134; // xx模式完成对局n次（认输、挂机离开比赛不完成）(支持所有房间模式)

	
	C_GainXTypeAchieveNPoint = 135; // 当前获得X类型的成就点数N

	
	OpenCardbagXQualityNCnt = 136; // 一次开包获得X品质（对应本表格CGRoleQuality）卡牌N张

	
	WinXModeXMissionNCnt = 137; // 获胜X模式X关卡(历练关卡,练习关卡)N次

	
	XModeOfferXCardIdXCntNTimes = 138; // 完成【y】次，在单局游戏中，献祭（≥）【n】个【契灵ID为A（可多选）】的契灵牌。

	
	XModeOfferXCardTypeXCntNTimes = 139; // 完成【y】次，单局游戏中，献祭（≥）【n】个【狼/神/民】契灵牌。

	
	XModeUseXSpellXCntNTimes = 140; // 完成【y】次，单局游戏中，使用（≥）【n】次【技能ID为B（可多选）】。

	
	XModeUseXSpellKillXCntNTimes = 141; // 完成【y】次，单局游戏中，使用【技能ID为B】的契灵消灭（≥）【n】张契灵。

	
	XModeGenSpyCardXCntNTimes = 142; // 完成【y】次，单局游戏中，生成（≥）【n】张间谍牌。

	
	XModeGenMoonCardXCntNTimes = 143; // 完成【y】次，单局游戏中，生成（≥）【n】张新月牌。

	
	XModeHaoZhanDayKillXCntNTimes = 144; // 完成【y】次，单局游戏中，使用好战在一天内主动消灭（≥）【n】张契灵。

	
	XModePkValueXCntNTimes = 145; // 完成【y】次，单局游戏中，使一张契灵的契约值到达（≥）【n】。

	
	XModeCopyCardXCountNCnt = 146; // 【在x模式（可多选）(支持所有房间模式)】单局游戏中，复制【>=x】次契灵,完成【n】次

	
	XModeCheckCardXCountInOneDayNCnt = 147; // 【在x模式（可多选）(支持所有房间模式)】一天内，最大探查【>=x】次数 (checkcard 次数) 完成【n】次

	
	XModeCheckCardXCountInOneRoundNCnt = 148; // 【在x模式（可多选）(支持所有房间模式)】一回合内，最大探查【>=x】次 (checkcard 次数) 完成【n】次

	
	XModeActionXCountInOneRoundNCnt = 149; // 【在x模式（可多选）(支持所有房间模式)】一回合内，最大进行行动【>=x】次 （包含通用攻击，通用探查，使用技能）完成【n】次

	
	BeginTimeXEndTimeXRechargeLessOrEqualNRmb = 150; // 在x开始时间戳到x结束时间戳(最大支持2038年内)段内充值数量小于等于N(举例：1元就是配100)

	
	ComXQualityCardNCnt = 151; // 合成了[X]稀有度的卡牌N张

	
	CurSeasonLadderRankX = 152; // 当前赛季的天梯段位大于等于X

	
	XModeXEthnicXResultNCnt = 153; // 在X模式（支持所有游戏模式)用X势力达成X结局N次

	
	XModeSommonActionNCnt = 154; // 在X模式（支持所有游戏模式)进行N次召唤行为

	
	XModeDieofferActionNCnt = 155; // 在X模式（支持所有游戏模式)进行N次献祭行为

	
	XModeLockActionNCnt = 156; // 在X模式（支持所有游戏模式)进行N次锁定行为

	
	XModeUseActpointNCnt = 157; // 在X模式（支持所有游戏模式)使用N点行动力

	
	XModeOnBoardXEthnicNCnt = 158; // 在X模式（支持所有游戏模式)我方上阵X势力的契灵N次

	
	XModeOnBoardXSkillNCnt = 159; // 在X模式（支持所有游戏模式)我方上阵带X技能【可选择技能：gloabal_conf表中的TaskFiniType159WatchedSkills】的契灵N次

	
	XModeWatchLastWordNCnt = 160; // 在X模式（支持所有游戏模式)经历双方场上的遗言触发N次

	
	XModePoisonKillCardNCnt = 161; // 在X模式（支持所有游戏模式)我方蛊毒效果消灭契灵N次

	
	XModeOnBoardXCardTypeNCnt = 162; // 在X模式（支持所有游戏模式)我方上阵X类型(对应本表CGCardType)的契灵N次

	
	InDDZUseDisasterCardNCnt = 163; // 在斗地主模式使用灾难牌N张

	
	InDDZAsXRoleWolfAliveWinNCnt = 164; // 在斗地主模式 胜方成员皆有狼人存活 作为X身份（魔王：1，天使：2）获胜N次

	
	InDDZAsXRoleWinNCnt = 165; // 斗地主模式作为X身份（魔王：1，天使：2）获得N胜

	
	S_FiniXModeGameNCnt = 301; // 累计, 在x模式下，进行过n场游戏

	
	S_WinXModeGameNCnt = 302; // 累计, 在x模式下，赢过n场游戏(支持所有房间模式)

	
	S_GainXCategoryXIdItemNCnt = 303; // 累计, 获得x道具，n个

	
	S_UseXCategoryXIdItemNCnt = 304; // 累计, 使用x道具，n个

	
	S_EveryDayLogin = 305; // 累计登录天数达到N天

	
	S_XModeLoseNCnt = 306; // 累计，【指定模式（可多选）】游戏失败了【指定局数】

	
	S_InXModeKillXTypeCardNCnt = 307; // 累计在【指定模式（可多选）】击杀了【指定类型卡牌（可多选）】达到【指定数量】

	
	S_GainXCategoryDiffItemNCnt = 308; // 累计获得了【指定数量】的【指定道具类别（可多选）】的不同道具

	
	S_RechargeDiamondNCnt = 309; // 累计充值了【指定数量】的钻石

	
	S_PurchaseXTypeMoneyNTimes = 310; // 累计使用【指定货币】在商城购买达到了【指定次数】

	
	S_PurchaseXTypeMoneyNCnt = 311; // 累计消耗【指定货币】在商城购买达到了【指定数量】

	
	S_GainXCardNCnt = 312; // 累计获得了【指定数量】的【指定roleid】的卡牌 (策划中没有这一项，不需要测试)

	
	S_GainXTypeDiffCardNCnt = 313; // 累计获得了【指定数量】的【指定类别（可多选）】的不同卡牌

	
	S_GainXTypeCardNCnt = 314; // 累计获得了【指定数量】的【指定类别（可多选）】的卡牌

	
	S_GainXTypeDiffExCardNCnt = 315; // 累计获得了【指定数量】的【指定类别（可多选）】的不同强化卡牌

	
	S_DecomXTypeCardNCnt = 316; // 累计分解了【指定数量】的【指定类别（可多选）】的卡牌

	
	S_ComXCardNCnt = 317; // 累计合成了【指定数量】的【指定roleid】的卡牌 (策划中没有这一项，不需要测试)

	
	S_ComXTypeDiffCardNCnt = 318; // 累计合成了【指定数量】的【指定类别（可多选）】的不同卡牌

	
	S_InitCardGroup = 319; // 用户初始化(辅助逻辑，策划中没有这一项，不需要测试)

	
	S_GainXQualityDiffCardNCnt = 320; // 累计获得了【指定数量】的【指定稀有度-品质（可多选）】的不同卡牌

	
	S_GainXQualityCardNCnt = 321; // 累计获得了【指定数量】的【指定稀有度-品质（可多选）】的卡牌

	
	S_GainXQualityDiffExCardNCnt = 322; // 累计获得了【指定数量】的【指定稀有度（可多选）】的不同强化卡牌

	
	S_DecomXQualityCardNCnt = 323; // 累计分解了【指定数量】的【指定稀有度（可多选）】的卡牌

	
	S_ComXQualityDiffCardNCnt = 324; // 累计合成了【指定数量】的【指定稀有度（可多选）】的不同卡牌

	
	S_FriendsNCnt = 325; // 累计添加了【指定数量】的好友

	
	S_ShareNCnt = 326; // 累计分享次数达到了【指定数量】

	
	S_OnLineNSec = 327; // 累计在线时长达到了【指定秒数】

	
	S_CurContinuousloginNCnt = 328; // 当前连续登录天数达到【指定天数】(辅助型，不测)

	
	S_MaxContinuousloginNCnt = 329; // 最高连续登录天数达到【指定天数】

	
	S_GuideXPhraseOnLiseSec = 330; // 新手引导某阶段在线累计时长

	
	S_GainXQualityXTypeXEthnicCardNCnt = 331; // 累计获得符合"卡牌品质、卡牌类型、种族"条件的card 达到n张

	
	S_ComXQualityXTypeXEthnicCardNCnt = 332; // 累计获得合成"卡牌品质、卡牌类型、种族"条件的card 达到n张

	
	S_GainXStaticSkinNCnt = 333; // 累计获得skinid=x的静态皮肤n个

	
	S_GainXDynamicSkinNCnt = 334; // 累计获得skinid=x的动态皮肤n个

	
	S_GainXQualityXTypeXEthnicStaticSkinNCnt = 335; // 累计获得符合"卡牌品质、卡牌类型、种族"条件的静态皮肤达到n个

	
	S_GainXQualityXTypeXEthnicDynamicSkinNCnt = 336; // 累计获得符合"卡牌品质、卡牌类型、种族"条件的动态皮肤达到n个

	
	S_GainXCategoryGoodsNCnt = 337; // 累计获得x类别道具，n个

	
	S_NoGainXQulityCardOpenBagNCnt = 338; // 累计开n包未获得某种品质的卡牌

	
	S_SignDayNCnt = 340; // 累计签到n天

	
	S_XModeXWinNCnt = 341; // 累计xx模式n胜n次

	
	S_GuildDiviNCnt = 342; // 累计公会占卜n次

	
	S_ContributeGuildActivityNCnt = 343; // 累计贡献公会活跃度n点

	
	S_KillBackStateWolfNCnt = 345; // 累计击杀暗置狼人牌n次

	
	S_C_SignDayNCnt = 346; // 周期內累计签到n天, 为这个类型添加一份配置，若没有配置时间，则不收集

	
	S_FinishHelpMissionNCnt = 347; // 累计完成n章帮助关

	
	S_XModeLeftOneWolfWinNCnt = 348; // 累计Xx模式剩下最后一匹狼人并且获胜n次

	
	S_OpenedCardbagNCnt = 349; // 累计开卡包数量

	
	S_XModeOnly1v1WolfWinNCnt = 351; // 累计【指定模式（可多选）】一局中双方只剩一张卡牌并且均为狼人牌的情况下获胜的次数

	
	S_XMode1v4WolfWinNCnt = 352; // 累计【指定模式（可多选）】一局中当己方只剩【1】头狼人，对方还有【4】头及以上狼人的情况下获胜的次数

	
	S_XModeXResultLastWordSpellNCnt = 353; // 累计【指定模式（可多选）】己方累计触发【n】次遗言

	
	S_XModeXResultATurnUpSummonNCntxlCard = 354; // 累计【指定模式（可多选）】己方累计主动翻开/召唤 【n】张带巡逻的卡牌

	
	S_XModeXResultLockOppCardNCnt = 355; // 累计【指定模式（可多选）】累计锁定对方【n】张卡牌

	
	S_XModeXResultRescueMyCardNCnt = 356; // 累计【指定模式（可多选）】累计复活己方【n】张卡牌

	
	S_XModeXResultDecideSpellNCnt = 357; // 累计【指定模式（可多选）】累计触发【n】次决定

	
	S_XModeXResultCtrlOppCardNCnt = 358; // 累计【指定模式（可多选）】累计控制敌方【n】张卡牌

	
	S_XModeXResultGetShieldNCnt = 359; // 累计【指定模式（可多选）】累计获得【n】次护甲

	
	S_XModeXResultBreakOppShieldNCnt = 360; // 累计【指定模式（可多选）】累计破坏敌方护甲【n】次

	
	S_XModeXResultDieofferNCnt = 370; // 累计【指定模式（可多选）(支持所有房间模式)】累计献祭己方【n】张卡牌

	
	S_XModeXResultSommonNCnt = 371; // 累计【指定模式（可多选）(支持所有房间模式)】累计召唤【n】张卡牌

	
	S_XModeXResultOffhandMyNCnt = 372; // 累计【指定模式（可多选）(支持所有房间模式)】累计洗回【n】张己方卡牌

	
	S_XModeXResultTurnbackMyNCnt = 373; // 累计【指定模式（可多选）(支持所有房间模式)】使己方卡牌潜伏累计【n】次

	
	S_XModeXResultPkkillNCnt = 374; // 累计【指定模式（可多选）(支持所有房间模式)】使用信用攻击击杀对方卡牌【n】次

	
	S_XModeXResultTurnoverMyNCnt = 375; // 累计【指定模式（可多选）(支持所有房间模式)】累计主动翻开己方【n】张卡牌

	
	S_XModeXResultCheckNCnt = 376; // 累计【指定模式（可多选）(支持所有房间模式)】累计探查对方【n】张卡牌

	
	S_XModeXResultAttackpointNCnt = 377; // 累计【指定模式（可多选）(支持所有房间模式)】累计造成【n】点信用点伤害

	
	S_XModeXResultTurnoverOppNCnt = 378; // 累计【指定模式（可多选）(支持所有房间模式)】累计翻开对手【n】张卡牌

	
	S_XModeXResultNewmoonCardNCnt = 379; // 累计【指定模式（可多选）(支持所有房间模式)】累计生成【n】张新月牌（生成指我方卡牌技能发动后，生成该卡牌）

	
	S_XModeXResultSpyCardNCnt = 380; // 累计【指定模式（可多选）(支持所有房间模式)】累计生成【n】张间谍牌（生成指我方卡牌技能发动后，生成该卡牌）

	
	S_XModeUseEffectCardNCnt = 381; // 累计【指定模式（可多选）(支持所有房间模式)】累计使用【n】张效果牌

	
	S_XModeUseNewmoonCardNCnt = 382; // 累计【指定模式（可多选）(支持所有房间模式)】累计使用【n】张新月牌

	
	S_XModeEnableSpyCardNCnt = 383; // 累计【指定模式（可多选）(支持所有房间模式)】累计生效【n】张间谍牌（生效指我生成的间谍牌被对方抽到）

	
	S_XModeXEthnicNCnt = 384; // 累计【指定模式（可多选）(支持所有房间模式)】使用【指定职业套牌（可多选）】牌进行【n】局游戏

	
	S_GuildTreasureNCnt = 385; // 累计完成公会宝图【n张】

	
	S_GuildxfHelpNCnt = 388; // 累计在公会寻访中帮助他人【n次】

	
	S_XModeXEthnicWinNCnt = 389; // 累计【指定模式（可多选）】使用【指定职业套牌（可多选）】套牌获胜【n】局

	
	S_XModeInXDayWinNCnt = 390; // 累计【指定模式（可多选）】【x】天内获胜【n】局

	
	S_XModeExXDayWinNCnt = 391; // 累计【指定模式（可多选）】超过【x】天获胜【n】局

	
	S_GainExStaticSkinNCnt = 392; // 累计 累计获得额外静态皮肤【n】个

	
	S_GainCardBackNCnt = 393; // 累计 收集N个卡背(包含初始卡背，只有永久卡背)

	
	S_GainChatBubbleNCnt = 394; // 累计 收集N个聊天气泡(包含初始聊天气泡，只有永久聊天气泡)

	
	S_CommentOnCardNCnt = 395; // 累计 对收藏册中的卡牌进行n次评论

	
	S_GuildCommissionFiniNCnt = 396; // 累计完成公会委托【n次】

	
	S_GuildHuntingFiniNCnt = 397; // 累计完成公会悬赏【n次】

	
	FinishXTypeTaskNCnt = 398; // 完成X类型的任务x次

	
	OpenedCardbagNCnt = 399; // 开卡包数量

	
	XEthnic2XLv = 400; // 特定势力等级达到X等级 cnt=1 p1=ethnic p2=level

	
	XModeKillRivalAllWolfWinNCnt = 401; // X模式不消灭对手神职与村民的情况下，全歼狼人获胜N次

	
	XModeKillXCardTypeXNumOneRoundNCnt = 402; // X模式一个回合内消灭对手X类型卡牌>=X张N次

	
	C_OneRaceRoundNoLoseWinNCnt = 403; // 竞技场没有失败的情况下获得n胜

	
	C_OneRaceRoundNoChangeCardWinNCnt = 404; // 竞技场不进行换牌并获得n胜

	
	AllInitWolfExistCompleteXMissionIdNCnt = 405; // 在初始狼人全部存在的情况下，通关X冒险关卡N次

	
	S_GuildDiviXRewardNCnt = 406; // 累计公会占卜获得X奖励n次

	
	CardGroupXUpvotedNCnt = 407; // 上传的热门卡组获得大于等于X次点赞N次

	
	S_OpenCardGoupGainAllQualityNCnt = 408; // 一次开包获得所有品质的卡牌累计n次

	
	XModeXMaxPointedStatusHandCardNCnt = 409; // 玩家场上同时建立n个以上的特定状态（护甲/飞行/遗言/好战/蛊毒/巡逻/转生）的卡牌

	
	XModeXGameResultCopyXCardNCnt = 410; // X模式下X游戏结局下使用混血儿复制X卡牌N次

	
	TrainUnlockXEthnicNCnt = 411; // 解锁练习模式X势力N次

	
	TokeChargeDiscountXFreeGoodsNCnt = 412; // 领取充值-特惠X免费商品N次

	
	S_FinishXTypeTaskNCnt = 413; // 累计完成X类型的任务x次

	
	NewAddFriendNCnt = 414; // 新增好友n个

	
	TryNewAddFriendNCnt = 415; // 尝试新增好友n个

	
	ManualCreateXNumCardGroup = 416; // 手动创建X号套牌

	
	FirstEnterXInterface = 417; // 首次进入X界面（1：狼王令）

	
	S_WinXModeMissionNCnt = 418; // 累计  通过X模式关卡N关

	
	S_FinishXModeMissionNCnt = 419; // 累计  完成X模式关卡N关

	
	S_RechargeLessOrEqualNRmb = 421; // 累计充值数量小于等于N(举例：1元就是配100) 【注意：多条件情况下，该条件只允许放在首位】

	
	S_WinXModeXMissionNCnt = 422; // 累计  通过X模式X关卡N关

	
	S_RechargeNRmb = 423; // 累计充值数量大于等于N(举例：1元就是配100)

	
	S_AllInitWolfExistCompleteXMissionIdNCnt = 424; // 在初始狼人全部存在的情况下，累计通关X冒险关卡N次

	
	S_OpenCardbagXQualityXNumNCnt = 425; // 累计完成 一次开包获得X品质（对应本表格CGRoleQuality）的卡牌X张N次

	
	S_InXModeStreakWinNCnt = 426; // 累计 最近在x模式连胜n次(支持所有房间模式)

	
	S_InXModeMaxStreakWinNCnt = 427; // 累计 在x模式最大连胜n次(支持所有房间模式)

	
	S_TriggerMaxLevelCardbagProtectNCnt = 428; // 累计触发最大等级的橙卡卡包保底N次

	
	S_AllInitWolfExistXModeWinNCnt = 429; // 在初始狼人全部存在的情况下，累计在X模式胜利N场(支持所有房间模式)

	
	S_BuyOrRechargeGainXCategoryItemNCnt = 430; // 累计, 通过购买或充值获得categary为X的道具N个

	
	S_TrainUnlockXEthnicNCnt = 431; // 累计解锁练习模式X势力N次

	
	C_TrainUnlockEthnicNCnt = 432; // 当前已解锁势力N个

	
	FinishXModeXMission = 433; // 完成X模式X关卡（目前只支持新手引导模式）

	
	BuyXCategoryXIDGoodsNCnt = 434; // 购买X类型X ID的商品N个

}

// Defined in table: GlobalsType
enum TaskPreConType
{	

	
	InvalidPreConType = 0; // 无效的前置条件

	
	XFuncIDUnlocded = 1; // X游戏功能已解锁

	
	LadderModeXLevel = 2; // 天梯段位达到X

	
	NeverTokeXFreeGoods = 3; // 未领取X免费商品

	
	PreStrengthenFiniXMissionIDNCnt = 4; // 137前置， 范围内的关卡未通关数量不小于完成条件中的X场

	
	PreTrainUnlockXEthnicNCnt = 5; // 411前置，范围内的势力未解锁数量不小于完成条件中的X个

	
	FriendUnlocked = 6; // 好友功能已解锁(关联globals_conf.xlsx里的UnlockFriendNeedFinishGuideIds)

	
	CanAddFriendNCnt = 7; // 可添加的好友数量>=N

}

// Defined in table: GlobalsType
enum GoodFrom
{	

	
	GF_Unknown = 0; // 未知

	
	GF_SystemDefault = 1; // 系统默认

	
	GF_GM = 2; // GM命令

	
	GF_Mail = 3; // 邮件奖励

	
	GF_Task = 4; // 任务

	
	GF_Recharge = 5; // 充值

	
	GF_WolfKingMedalLvRwd = 6; // 狼王令等级奖励

	
	GF_WolfKingMedalFullLvRwd = 7; // 狼王令循环宝箱奖励及一键领奖

	
	GF_WolfKingMedalAddLv = 8; // 狼王令购买等级

	
	GF_WolfKingMedalUpgrade = 9; // 狼王令进阶

	
	GF_MonthAddUpSign = 10; // 月累计签到

	
	GF_SignExchange = 11; // 签到兑换

	
	GF_AssistRwd = 12; // 请求助力奖励

	
	GF_EthnicLevelRwd = 13; // 势力升级奖励

	
	GF_FinishGuideMission = 14; // 完成引导任务

	
	GF_BuyShopGoods = 15; // 商店购买

	
	GF_CDKeyGift = 16; // 礼包码

	
	GF_WeekMonthCardRwd = 17; // 领取月卡周卡奖励

	
	GF_AdventureRwd = 18; // 冒险奖励

	
	GF_ContSignRwd = 19; // 连续签到奖励

	
	GF_LoginWelfareRwd = 20; // 新人七日奖励

	
	GF_CardStoryRwd = 21; // 卡牌故事奖励

	
	GF_TheActivityExchange = 22; // 活动兑换

	
	GF_TheActivityLadderLvRwd = 23; // 天梯冲段奖励

	
	GF_BarTypeRwd = 24; // 进度条类型奖励

	
	GF_GuildCreate = 25; // 创建公会

	
	GF_GuildRename = 26; // 公会改名

	
	GF_GuildTreasure = 27; // 公会宝图

	
	GF_GuildCommissionStageRwd = 28; // 公会委托阶段奖励

	
	GF_GuildCommissionLvRwd = 29; // 公会委托等级奖励

	
	GF_GuildCommissionStart = 30; // 公会委托开始

	
	GF_GuildCommissionFinish = 31; // 公会委托完成

	
	GF_GuildDivination = 32; // 公会占卜

	
	GF_GuildHuntingTaskRwd = 33; // 公会悬赏任务奖励

	
	GF_GuildXfRwd = 34; // 公会寻访奖励

	
	GF_GuildXfHelp = 35; // 公会帮助寻访

	
	GF_PKRoomRwd = 36; // 自建赛奖励

	
	GF_CompeteRwd = 37; // 官方赛奖励

	
	GF_RaceReward = 38; // 竞技场奖励

	
	GF_UserOpenChest = 39; // 用户开宝箱

	
	GF_UserOpenCardBag = 40; // 用户开卡包

	
	GF_WeekRwd = 41; // 用户周奖励

	
	GF_UseGood = 42; // 使用物品

	
	GF_ComposeCard = 43; // 合成卡牌

	
	GF_UserRename = 44; // 用户改名

	
	GF_PracticeRwd = 45; // 练习模式奖励

	
	GF_NoviceGuideRwd = 46; // 新手教学奖励

	
	GF_OpenOptionalChest = 47; // 自选宝箱

	
	GF_UserLevelUp = 48; // 用户升级

	
	GF_GameTally = 49; // 游戏结算

	
	GF_FirstNoviceRwd = 50; // 新手场首场奖励

	
	GF_GoodReplace = 51; // 加道具时做替换

	
	GF_BindPhone = 52; // 绑定手机

	
	GF_PKRoomCreate = 53; // 创建自建赛房间

	
	GF_PKRoomJoin = 54; // 加入自建赛房间

	
	GF_CompeteJoin = 55; // 加入官方赛

	
	GF_CompeteUpgrade = 56; // 升级官方赛

	
	GF_ChatInLoudSpeaker = 57; // 聊天喇叭

	
	GF_KeepWelfareRwd = 58; // 投放卡牌奖励

	
	GF_ComposeCardGroupTry = 59; // 合成限免卡组

	
	GF_NewMoonLegendRwd = 60; // 新月传说每日奖励

	
	GF_PlayerRegressRwd = 61; // 玩家回归每日奖励

	
	GF_LoginWelfareRwdPC = 62; // 新人七日奖励PC版

}

// Defined in table: GlobalsType
enum ShopMoneyType
{	

	
	InvalidShop = 0; // 无效

	
	Diamond = 1; // 狼牙

	
	Coin = 2; // 金币

	
	MatchPoints = 3; // 赛事积分

	
	CompeteCoin = 4; // 竞技币

	
	GuildPoints = 5; // 公会积分

	
	Gold = 6; // 金狼牙

	
	MGoods = 7; // 指定道具

	
	RMB = 8; // 充值购买

	
	HappyCoin = 9; // 欢乐豆

}

// Defined in table: GlobalsType
enum GameResultType
{	

	
	InvalidGameResult = 0; // 无定义

	
	GWin = 1; // 胜利

	
	GLost = 2; // 输了

	
	GDraw = 3; // 平局

	
	GEscape = 4; // 逃跑

	
	GSurrender = 5; // 认输,一方认输，另一方就会躺赢

	
	GLayWin = 6; // 躺赢

}

// Defined in table: GlobalsType
enum UserLabelDataType
{	

	
	L_Invalid = 0; // 无效

	
	L_RoleCreateTime = 1; // 角色创建时间

	
	L_LastestLogoutTime = 2; // 最后一次登出时间

	
	L_PlayerAge = 3; // 玩家年龄

	
	L_MedalGrade = 4; // 当前勋章等级

	
	L_LevelGrade = 5; // 当前段位等级

	
	L_EthnicRangerLevel = 6; // 当前白鸽盟势力等级

	
	L_EthnicBlackGrownLevel = 7; // 当前黑袍会势力等级

	
	L_EthnicMasterLevel = 8; // 当前无序塔势力等级

	
	L_EthnicSpiritTempleLevel = 9; // 当前圣灵殿势力等级

	
	L_EthnicKingdomLevel = 10; // 当前王国势力等级

	
	L_EthnicLurkerLevel = 11; // 当前潜伏社势力等级

	
	L_TotalRecharge = 12; // 累计充值金额

	
	L_LastLoginTime = 13; // 最后登录时间

	
	L_RemainCoin = 14; // 剩余金币数

	
	L_RemainMoney = 15; // 剩余狼石数

	
	L_RemainGold = 16; // 剩余狼印数

	
	L_RemainCompeteCoin = 17; // 剩余竞技币数

	
	L_RemainMatchPoints = 18; // 剩余荣誉币数

	
	L_RemainSkinFrag = 19; // 剩余皮肤券数

	
	L_RemainWolfCrystal = 20; // 剩余碎晶石数

	
	L_RemainCardBag = 21; // 剩余卡包数

	
	L_OwnLegendCardCnt = 22; // 拥有传说卡牌数（去重）

	
	L_OwnEpicCardCnt = 23; // 拥有史诗卡牌数（去重）

	
	L_OwnRareCardCnt = 24; // 拥有稀有卡牌数（去重）

	
	L_OwnNormalCardCnt = 25; // 拥有经典卡牌数（去重）

	
	L_OwnNormalSkinCnt = 26; // 拥有普通皮肤数

	
	L_OwnEpicSkinCnt = 27; // 拥有典藏皮肤数

	
	L_OwnLegendSkinCnt = 28; // 拥有传世皮肤数

	
	L_WolfKingLevel = 29; // 当前狼王令等级

	
	L_WolfKingAdvanced = 30; // 当前狼王令是否进阶

	
	L_ActivateMonthCard = 31; // 是否激活月卡

	
	L_RangerCardGroupBattleCnt = 32; // 白鸽盟套牌战斗次数

	
	L_BlackGownrCardGroupBattleCnt = 33; // 黑袍会套牌战斗次数

	
	L_MasterCardGroupBattleCnt = 34; // 无序塔套牌战斗次数

	
	L_KingdomCardGroupBattleCnt = 35; // 王国套牌战斗次数

	
	L_SpiritTempleCardGroupBattleCnt = 36; // 圣灵殿套牌战斗次数

	
	L_LurkerTempleCardGroupBattleCnt = 37; // 潜伏社套牌战斗次数

	
	L_MostBattleEthnic = 38; // 战斗次数最多的势力

	
	L_TotalBattleCnt = 39; // 总战斗次数

	
	L_LadderBattleCnt = 40; // 天梯战斗次数

	
	L_RaceBattleCnt = 41; // 竞技场战斗次数

	
	L_MostBattleMode = 42; // 战斗次数最多的模式

	
	L_OverallWinningRate = 43; // 整体胜率或胜场

	
	L_CostCoinCnt = 44; // 消费金币数

	
	L_CostMoneyCnt = 45; // 消费狼石数

	
	L_CostGoldCnt = 46; // 消费狼印数

	
	L_CostSkinFragCnt = 47; // 消费皮肤券数

	
	L_RechargeAmount = 48; // 充值金额

	
	L_TotalRechargeDays = 49; // 累计充值天数

	
	L_MaxRechargeOnce = 50; // 单笔充值最高值

	
	L_OpenCardBagCnt = 51; // 打开卡包数

	
	L_TotalOnlineTime = 52; // 总在线时长

	
	L_FinishWolfkingTaskCnt = 53; // 狼王令任务完成数

	
	L_WeekLoginDays = 54; // 周累计登录天数

	
	L_TotalLoginDays = 55; // 累计登录天数

}

// Defined in table: Goods
enum showTypeStr
{	

	// 无效
	stInvalid = 0; 

	// 道具
	propType = 1; 

	// 装饰
	adornType = 2; 

	// 活动
	actType = 3; 

}

// Defined in table: Shop
enum ExGratiaTypeInfo
{	

	// 惊喜
	surprise = 0; 

	// 礼包
	giftBag = 1; 

	// 预组
	preassembling = 2; 

}

// Defined in table: card_task
enum TaskClearType
{	

	// 未声明
	None = 0; 

	// 日删除
	Day = 1; 

	// 周删除
	Week = 2; 

	// 领奖后删除
	AfterReward = 3; 

}

// Defined in table: Gift
enum CDKeyType
{	

	// 无效
	CDKTInvalid = 0; // 布尔类型

	// 标准
	CDKTStandard = 1; 

	// 通用
	CDKTUniversal = 2; 

	// 服务器
	CDKTServer = 3; 

}

// Defined in table: bar_type_reward
enum BarRewardTyp
{	

	
	BarRewardInvalid = 0; 

	
	BarRewardStrengthenTraining = 1; // 历练奖励(奖励配置strengthen_training.xlsx）

	
	BarRewardHWCommunity = 4; // 海外社区跳转关注领奖

	
	BarRewardQuestionnaire = 5; // 问卷奖励(奖励配置question.xlsx)

	
	BarRewardTopUp = 6; // 特权详情页累计充值奖励

}

// Defined in table: ActiveAllCfg
enum ActivityType
{	

	
	InvalidActivity = 0; // 无效

	
	ActivityLadderLv = 1; // 天梯冲段活动

	
	ActivityMonthSign = 2; // 月签

	
	ActivityExchange = 3; // 兑换

	
	ActivityTaskCycle = 4; // 循环任务

	
	ActivityTaskCommon = 5; // 一般任务

	
	ActivityRebate7Task = 6; // 返利活跃福利页

	
	ActivityTaskFiniCycle = 7; // 自动循环任务

	
	ActivityCardPreview = 8; // 卡牌预览

	
	ActivityAd = 99; // 广告

}

// Defined in table: ActiveAllCfg
enum Switch
{	

	// 无效
	Invalid = 0; 

	// 关
	Close = 1; 

	// 开
	Open = 2; 

}

// Defined in table: LoginWhiteList
enum LoginWhiteListType
{	

	// 无效
	LWTInvalid = 0; 

	// 大陆正式
	LWTOfficial = 1; 

	// 阿里测试
	LWTOfficialApply = 2; 

	// 华为先锋
	LWTHuaWeiXF = 3; 

	// 海外正式
	LWTOverSeaOfficial = 4; 

}

// Defined in table: GuildFlag
enum FLagPartPayType
{	

	// 无效
	InvalidType = 0; 

	// 免费
	FreeType = 1; 

	// 付费
	ChargeType = 2; 

}

// Defined in table: GuildFlag
enum FlagPartName
{	

	// 无效
	InvalidName = 0; 

	// 旗面
	FlagFace = 1; 

	// 会徽
	Emblem = 2; 

	// 战纹
	Tattoo = 3; 

}

// Defined in table: GuildFlag
enum FlagUnlockType
{	

	
	InvalidUnlocak = 0; // 解锁类型

	// 工会等级
	GuildLevelNotLess = 1; // 工会等级达到【x】解锁

}

// Defined in table: Rebate
enum GameTestPeriod
{	

	
	GameTestPeriodInvalid = 0; 

	
	BetaTestFirst = 1; // 第一次删档计费测试

	
	BetaTestSecond = 2; // 第二次删档计费测试

	
	OpenBetaTest = 100; // 公测

}

// Defined in table: MedelPatch
enum MedelPatchCode
{	

	// 未定
	MPC_Invalid = 0; // 未定

	// 能
	MPC_CanTake = 1; // 能玩里程碑

	// 不能
	MPC_CanNotTake = 2; // 不能能玩里程碑

}


// Defined in table: GameConfig
message GameConfig
{	
	
	
	repeated GlobalsConfDefine GlobalsConf = 1; // GlobalsConf
	
	
	repeated LevelDefine Level = 2; // Level
	
	
	repeated CardSkinDefine CardSkin = 3; // CardSkin
	
	
	repeated old_card_skinDefine old_card_skin = 4; // old_card_skin
	
	
	repeated GoodsDefine Goods = 5; // Goods
	
	
	repeated CardBankCfgDefine CardBankCfg = 6; // CardBankCfg
	
	
	repeated OldCardBankDefine OldCardBank = 7; // OldCardBank
	
	
	repeated V2SpellDefine V2Spell = 8; // V2Spell
	
	
	repeated OldV2SpellDefine OldV2Spell = 9; // OldV2Spell
	
	
	repeated ShopDefine Shop = 10; // Shop
	
	
	repeated MonthCardDefine MonthCard = 11; // MonthCard
	
	
	repeated card_taskDefine card_task = 12; // card_task
	
	
	repeated multi_taskDefine multi_task = 13; // multi_task
	
	
	repeated medal_taskDefine medal_task = 14; // medal_task
	
	
	repeated achieve_taskDefine achieve_task = 15; // achieve_task
	
	
	repeated ladder_taskDefine ladder_task = 16; // ladder_task
	
	
	repeated acommon_taskDefine acommon_task = 17; // acommon_task
	
	
	repeated mode_taskDefine mode_task = 18; // mode_task
	
	
	repeated xmode_mission_taskDefine xmode_mission_task = 19; // xmode_mission_task
	
	
	repeated king_taskDefine king_task = 20; // king_task
	
	
	repeated a7day_taskDefine a7day_task = 21; // a7day_task
	
	
	repeated acycle_taskDefine acycle_task = 22; // acycle_task
	
	
	repeated afini_cycle_taskDefine afini_cycle_task = 23; // afini_cycle_task
	
	
	repeated RaceMatchCardsDefine RaceMatchCards = 24; // RaceMatchCards
	
	
	repeated RaceCandidateRolesDefine RaceCandidateRoles = 25; // RaceCandidateRoles
	
	
	repeated RaceChangeCardDefine RaceChangeCard = 26; // RaceChangeCard
	
	
	repeated RaceMutexCardsDefine RaceMutexCards = 27; // RaceMutexCards
	
	
	repeated RaceCosmicCardsDefine RaceCosmicCards = 28; // RaceCosmicCards
	
	
	repeated VIPDefine VIP = 29; // VIP
	
	
	repeated RaceRewardDefine RaceReward = 30; // RaceReward
	
	
	repeated ProductsDefine Products = 31; // Products
	
	
	repeated chestDefine chest = 32; // chest
	
	
	repeated optional_chestDefine optional_chest = 33; // optional_chest
	
	
	repeated GuideRewardDefine GuideReward = 34; // GuideReward
	
	
	repeated ExpCoinDefine ExpCoin = 35; // ExpCoin
	
	
	repeated LadderRankDefine LadderRank = 36; // LadderRank
	
	
	repeated LevelRankRewardDefine LevelRankReward = 37; // LevelRankReward
	
	
	repeated RoomScoreDefine RoomScore = 38; // RoomScore
	
	
	repeated RankSucessedDefine RankSucessed = 39; // RankSucessed
	
	
	repeated AdventureMissionDefine AdventureMission = 40; // AdventureMission
	
	
	repeated UserBlackListDefine UserBlackList = 41; // UserBlackList
	
	
	repeated CardGroupRuleDefine CardGroupRule = 42; // CardGroupRule
	
	
	repeated AdminPermissionDefine AdminPermission = 43; // AdminPermission
	
	
	repeated ChapterDefine Chapter = 44; // Chapter
	
	
	repeated AICardGroupDefine AICardGroup = 45; // AICardGroup
	
	
	repeated CardMatchDefine CardMatch = 46; // CardMatch
	
	
	repeated GuildDefine Guild = 47; // Guild
	
	
	repeated RoomSettingsDefine RoomSettings = 48; // RoomSettings
	
	
	repeated CGPairCfgDefine CGPairCfg = 49; // CGPairCfg
	
	
	repeated CGMultiPairCfgDefine CGMultiPairCfg = 50; // CGMultiPairCfg
	
	
	repeated CardGroupDefine CardGroup = 51; // CardGroup
	
	
	repeated AllRolesDefine AllRoles = 52; // AllRoles
	
	
	repeated RobotRuleDefine RobotRule = 53; // RobotRule
	
	
	repeated RobotLevelDefine RobotLevel = 54; // RobotLevel
	
	
	repeated VipLevelDefine VipLevel = 55; // VipLevel
	
	
	repeated GameDataDefine GameData = 56; // GameData
	
	
	repeated CollectAvatarHeadDefine CollectAvatarHead = 57; // CollectAvatarHead
	
	
	repeated CollectAvatarBorderDefine CollectAvatarBorder = 58; // CollectAvatarBorder
	
	
	repeated CollectCardBackDefine CollectCardBack = 59; // CollectCardBack
	
	
	repeated SkinInGsDefine SkinInGs = 60; // SkinInGs
	
	
	repeated CollectCardsDefine CollectCards = 61; // CollectCards
	
	
	repeated CollectSkinsDefine CollectSkins = 62; // CollectSkins
	
	
	repeated LikesDefine Likes = 63; // Likes
	
	
	repeated CharmsDefine Charms = 64; // Charms
	
	
	repeated CardGroupLevelDefine CardGroupLevel = 65; // CardGroupLevel
	
	
	repeated RobotNameDefine RobotName = 66; // RobotName
	
	
	repeated ModeEntranceDefine ModeEntrance = 67; // ModeEntrance
	
	
	repeated ModeConfigDefine ModeConfig = 68; // ModeConfig
	
	
	repeated GiftDefine Gift = 69; // Gift
	
	
	repeated MonthAddUpSignDefine MonthAddUpSign = 70; // MonthAddUpSign
	
	
	repeated SceneDefine Scene = 71; // Scene
	
	
	repeated SCSignPeriodDefine SCSignPeriod = 72; // SCSignPeriod
	
	
	repeated CardBagProtectDefine CardBagProtect = 73; // CardBagProtect
	
	
	repeated CardBagLuckyValueDefine CardBagLuckyValue = 74; // CardBagLuckyValue
	
	
	repeated CardBagLuckyLevelDefine CardBagLuckyLevel = 75; // CardBagLuckyLevel
	
	
	repeated CardBagLuckyGroupDefine CardBagLuckyGroup = 76; // CardBagLuckyGroup
	
	
	repeated LuckyLegendDefine LuckyLegend = 77; // LuckyLegend
	
	
	repeated LuckyEpicDefine LuckyEpic = 78; // LuckyEpic
	
	
	repeated CertainGoodsDefine CertainGoods = 79; // CertainGoods
	
	
	repeated CardBagSettingsDefine CardBagSettings = 80; // CardBagSettings
	
	
	repeated AssistConfigDefine AssistConfig = 81; // AssistConfig
	
	
	repeated GtIpPassDefine GtIpPass = 82; // GtIpPass
	
	
	repeated AchieveAllChestDefine AchieveAllChest = 83; // AchieveAllChest
	
	
	repeated AchieveCollectChestDefine AchieveCollectChest = 84; // AchieveCollectChest
	
	
	repeated AchieveTrainChestDefine AchieveTrainChest = 85; // AchieveTrainChest
	
	
	repeated AchieveFightChestDefine AchieveFightChest = 86; // AchieveFightChest
	
	
	repeated GuildDivinationDefine GuildDivination = 87; // GuildDivination
	
	
	repeated GuildHuntingTaskDefine GuildHuntingTask = 88; // GuildHuntingTask
	
	
	repeated GuildTreasureDefine GuildTreasure = 89; // GuildTreasure
	
	
	repeated EthnicLevelDefine EthnicLevel = 90; // EthnicLevel
	
	
	repeated EthnicMakeUp402Define EthnicMakeUp402 = 91; // EthnicMakeUp402
	
	
	repeated ReplenishSignDefine ReplenishSign = 92; // ReplenishSign
	
	
	repeated ReportPunishDefine ReportPunish = 93; // ReportPunish
	
	
	repeated ReportDefine Report = 94; // Report
	
	
	repeated GuildCommissionDefine GuildCommission = 95; // GuildCommission
	
	
	repeated GuildCommissionLvDefine GuildCommissionLv = 96; // GuildCommissionLv
	
	
	repeated GuildCommissionStageDefine GuildCommissionStage = 97; // GuildCommissionStage
	
	
	repeated MysteryShopDropDefine MysteryShopDrop = 98; // MysteryShopDrop
	
	
	repeated mystery_shopDefine mystery_shop = 99; // mystery_shop
	
	
	repeated StrengthenTrainingDefine StrengthenTraining = 100; // StrengthenTraining
	
	
	repeated PeakFilterDefine PeakFilter = 101; // PeakFilter
	
	
	repeated WolfDiffDefine WolfDiff = 102; // WolfDiff
	
	
	repeated CardDiffDefine CardDiff = 103; // CardDiff
	
	
	repeated FinalWolfDiffDefine FinalWolfDiff = 104; // FinalWolfDiff
	
	
	repeated EloDiffDefine EloDiff = 105; // EloDiff
	
	
	repeated EloSumDefine EloSum = 106; // EloSum
	
	
	repeated WolfKingActivityDefine WolfKingActivity = 107; // WolfKingActivity
	
	
	repeated WolfKingLvDefine WolfKingLv = 108; // WolfKingLv
	
	
	repeated bar_type_rewardDefine bar_type_reward = 109; // bar_type_reward
	
	
	repeated PKRoomDefine PKRoom = 110; // PKRoom
	
	
	repeated ActiveAllCfgDefine ActiveAllCfg = 111; // ActiveAllCfg
	
	
	repeated welfare_allDefine welfare_all = 112; // welfare_all
	
	
	repeated keep_taskDefine keep_task = 113; // keep_task
	
	
	repeated keep_schedDefine keep_sched = 114; // keep_sched
	
	
	repeated sevendayDefine sevenday = 115; // sevenday
	
	
	repeated sevenday_pcDefine sevenday_pc = 116; // sevenday_pc
	
	
	repeated contsignDefine contsign = 117; // contsign
	
	
	repeated task7dayDefine task7day = 118; // task7day
	
	
	repeated activity_ladder_lvDefine activity_ladder_lv = 119; // activity_ladder_lv
	
	
	repeated rebate7taskDefine rebate7task = 120; // rebate7task
	
	
	repeated exchangeDefine exchange = 121; // exchange
	
	
	repeated act_cycle_taskDefine act_cycle_task = 122; // act_cycle_task
	
	
	repeated act_common_taskDefine act_common_task = 123; // act_common_task
	
	
	repeated act_fini_cycle_taskDefine act_fini_cycle_task = 124; // act_fini_cycle_task
	
	
	repeated adDefine ad = 125; // ad
	
	
	repeated card_previewDefine card_preview = 126; // card_preview
	
	
	repeated CarnivalCardPoolDefine CarnivalCardPool = 127; // CarnivalCardPool
	
	
	repeated LoginWhiteListDefine LoginWhiteList = 128; // LoginWhiteList
	
	
	repeated CompeteDefine Compete = 129; // Compete
	
	
	repeated CompeteWinDiffDefine CompeteWinDiff = 130; // CompeteWinDiff
	
	
	repeated CompeteRewardDefine CompeteReward = 131; // CompeteReward
	
	
	repeated GuildFlagDefine GuildFlag = 132; // GuildFlag
	
	
	repeated CardBackDefine CardBack = 133; // CardBack
	
	
	repeated CGTagDefine CGTag = 134; // CGTag
	
	
	repeated cardStoryDefine cardStory = 135; // cardStory
	
	
	repeated CGAIGroupCfgDefine CGAIGroupCfg = 136; // CGAIGroupCfg
	
	
	repeated questionTabDefine questionTab = 137; // questionTab
	
	
	repeated base_enDefine base_en = 138; // base_en
	
	
	repeated questionsDefine questions = 139; // questions
	
	
	repeated questions_enDefine questions_en = 140; // questions_en
	
	
	repeated RebateDefine Rebate = 141; // Rebate
	
	
	repeated rebateTaskDefine rebateTask = 142; // rebateTask
	
	
	repeated rebate_finish_timeDefine rebate_finish_time = 143; // rebate_finish_time
	
	
	repeated rebateRewardDefine rebateReward = 144; // rebateReward
	
	
	repeated abtestRewardDefine abtestReward = 145; // abtestReward
	
	
	repeated shopPresetCardDefine shopPresetCard = 146; // shopPresetCard
	
	
	repeated PracticeDefine Practice = 147; // Practice
	
	
	repeated helpCardsDefine helpCards = 148; // helpCards
	
	
	repeated OrientDrawDefine OrientDraw = 149; // OrientDraw
	
	
	repeated RealNameDefine RealName = 150; // RealName
	
	
	repeated V2CardDiffDefine V2CardDiff = 151; // V2CardDiff
	
	
	repeated NoviceGuideDefine NoviceGuide = 152; // NoviceGuide
	
	
	repeated guide3_gameDefine guide3_game = 153; // guide3_game
	
	
	repeated first_noviceDefine first_novice = 154; // first_novice
	
	
	repeated GoodsExchangeDefine GoodsExchange = 155; // GoodsExchange
	
	
	repeated CardGroupTryDefine CardGroupTry = 156; // CardGroupTry
	
	
	repeated NewMoonLegendDefine NewMoonLegend = 157; // NewMoonLegend
	
	
	repeated NewMoonLegendDayRewardDefine NewMoonLegendDayReward = 158; // NewMoonLegendDayReward
	
	
	repeated PlayerRegressDefine PlayerRegress = 159; // PlayerRegress
	
	
	repeated PlayerRegressRewardsDefine PlayerRegressRewards = 160; // PlayerRegressRewards
	
	
	repeated PlayerRegressGiftsDefine PlayerRegressGifts = 161; // PlayerRegressGifts
	
	
	repeated UserLabelsDefine UserLabels = 162; // UserLabels
	
	
	repeated UserBaseLabelsDefine UserBaseLabels = 163; // UserBaseLabels
	
	
	repeated UserActionLabelsDefine UserActionLabels = 164; // UserActionLabels
	
	
	repeated MedelPatchDefine MedelPatch = 165; // MedelPatch
	
	
	repeated RecmdCGDefine RecmdCG = 166; // RecmdCG

}

// Defined in table: GlobalsConf
message GoodsItemTyp
{	
	
	// 道具类型
	GoodsCategory Category = 1; 
	
	// 道具ID
	int32 ID = 2; 
	
	// 个数
	int32 Count = 3; 
	
	// 数据
	string Data = 4; // 特殊数据处理
	
	// 用户标签
	int32 UserLable = 5; // 给指定标签的用户

}

// Defined in table: GlobalsConf
message StageAI
{	
	
	// 组卡阶段
	int32 Stage = 1; 
	
	// 卡组ID
	string GropStr = 2; 
	
	
	repeated int32 AICardGroups = 3; 

}

// Defined in table: GlobalsConf
message RobotLevel
{	
	
	// 强度
	int32 Level = 1; 
	
	// 概率
	int32 P = 2; 

}

// Defined in table: GlobalsConf
message EthnicExamine
{	
	
	// 我方卡组
	string OwnCardGroup = 1; // 我方卡牌集合
	
	// 对方卡组
	string OppoCardGroup = 2; // 对方卡牌集合
	
	// 对方势力
	EthnicType OppoEthnic = 3; // 对方势力
	
	// 对方名字
	string OppoName = 4; // 对方名字
	
	// AI强度
	int32 RobotLevel = 5; // ai强度id
	
	// 顺序卡组
	bool IsOrderly = 6; // 是否顺序生成卡组
	
	// 房间保留时间
	int32 RetainTime = 7; // 玩家断线后，房间保留多长时间， 时间秒
	
	// 开关状态
	bool IsOn = 8; // 开关状态
	
	// 帮助AI强度
	int32 HelpRobotLevel = 9; // 只能提示ai强度
	
	// 开启帮助AI
	bool EnableHelpRobot = 10; // 是否开启智能提示ai
	
	// 玩家先手
	bool PlayerFirstHand = 11; // 是否玩家先手, (与ai先手只能有一个为true， 都不填则随机)
	
	// AI先手
	bool RobotFirstHand = 12; // 是否AI先手
	
	// 初始手牌数
	int32 InitHandCnt = 13; // 游戏开始初始卡牌数，默认表【cardgroup_rule.xlsx】规则

}

// Defined in table: GlobalsConf
message MysteryShop
{	
	
	// 刷新道具id
	int32 RefreshGoodsId = 1; 
	
	// 刷新道具分类
	GoodsCategory RefreshGoodsCategory = 2; 
	
	// 付费刷新次数上限
	int32 RefreshTimesLimit = 3; 

}

// Defined in table: GlobalsConf
message TFcmConfig
{	
	
	// 休
	string HolidayFreeDay = 1; // 假日休息，"2021.5.1;2021.10.1"
	
	// 班
	string HolidayWorkDay = 2; // 假日上班，格式同上
	
	// 禁登
	string PunishTimeRange = 3; // 禁止登录时间范围，"22:00,8:00"表示[22:00,8:00)
	
	// 假游时
	int32 HolidayGameMinute = 4; // 假日游戏时间，单位分钟3*60
	
	// 常游时
	int32 UsualDayGameMinute = 5; // 平常游戏时间，单位分钟1.5*60
	
	// 试玩时
	int32 TryPlayMinute = 6; // 试玩游戏时间，单位分钟1*60
	
	// 试玩限制天数
	int32 TryPlayLimitDay = 7; // 网络游戏企业在15天内不得重复提供游客体验模式。
	
	// 实名奖励
	int32 RealNameReward = 8; // 实名奖励狼石数

}

// Defined in table: GlobalsConf
message TFcmState
{	
	
	// 实名
	int32 RealNameState = 1; // 关闭0,强制1，非强制2(可跳过)
	
	// 在线限制
	int32 FcmOnlineState = 2; // 关闭0,开启1
	
	// 实名严验
	int32 RealNameStrickCheckState = 3; // 关闭0,开启1

}

// Defined in table: GlobalsConf
message TUserEscapeGame
{	
	
	// 每日逃跑
	int32 FreezeGameDailyEscapeCnt = 1; // 每日多少逃跑数后处罚生效
	
	// 冻结时间
	int32 FreezeGameDuration = 2; // 冻结游戏时间, 单位 min.
	
	// 冻结增量
	int32 FreezeGameDurationIncr = 3; // 冻结游戏时间增量, 单位 min.
	
	// 最大冻结
	int32 FreezeGameDurationMax = 4; // 最大冻结游戏时间, 单位 min.

}

// Defined in table: GlobalsConf
message TUserConsumeLimit
{	
	
	// 限消费开关
	bool EnableConsumeLimit = 1; // 钻石消费限制开关
	
	// 钻石限
	int32 LimitDiamonds = 2; // 钻石限额

}

// Defined in table: GlobalsConf
message TLoginLimit
{	
	
	// 在线
	int32 MaxLoginLimit = 1; // 登录在线人数上限(0为不限制)
	
	// 累计
	int32 MaxTestUserLimit = 2; // 测试人数上限(数据库中累计上限)(0为不限制)

}

// Defined in table: GlobalsConf
message AutoCardGroup
{	
	
	// 筛选模式
	string SupportMode = 1; // 需要存储套牌的模式
	
	// 存储上限
	int32 StorageLimit = 2; // 每个模式的存储数量上限
	
	// 筛选下限
	int32 MinScreenCnt = 3; // 随机筛选需要的存储数量下限

}

// Defined in table: GlobalsConf
message InitialCardGroup
{	
	
	// 左位置
	int32 LeftPosition = 1; // 狼随机插入位置起始位置
	
	// 排除范围
	int32 LocationExclusion = 2; // 狼随机插入位置排除范围

}

// Defined in table: GlobalsConf
message UserUploadCardGroup
{	
	
	// 火上限百分比
	string Percent = 1; // 热门卡组的火上限值百分比分隔数
	
	// 基本点赞奖励数
	int32 UpvoteRewardCnt = 2; // 点赞无条件奖励物品数
	
	// 每个点赞奖励数
	int32 PerUpvoteRewardCnt = 3; // 每个点赞奖励数
	
	// 最大点赞奖励数
	int32 MaxUpvoteRewardCnt = 4; // 最大点赞奖励数
	
	// 单用户最大上传数
	int32 UserMaxUploadCnt = 5; // 单用户最大上传数
	
	// 全服用户最大上传数
	int32 TotalMaxUploadCnt = 6; // 全服用户最大上传数
	
	// 上传卡组过期秒数
	int32 UploadCGExpireSec = 7; // 上传卡组过期秒数

}

// Defined in table: GlobalsConf
message RecCardGroup
{	
	
	// 初始推荐卡组热度值
	int32 InitHotValForRec = 1; // 初始推荐卡组热度值
	
	// 初始推荐卡组胜场值
	int32 InitWinValForRec = 2; // 初始推荐卡组胜场值
	
	// 最大推荐卡组热度值
	int32 MaxHotValForRec = 3; // 最大推荐卡组热度值

}

// Defined in table: GlobalsConf
message TRandNum
{	
	
	// 值
	int32 Number = 1; // 数值
	
	// 百分比
	int32 Percent = 2; // 百分比

}

// Defined in table: GlobalsConf
message NormalTime
{	
	
	// 时
	int32 Hour = 1; // 时
	
	// 分
	int32 Minute = 2; // 分
	
	// 秒
	int32 Second = 3; // 秒

}

// Defined in table: GlobalsConf
message TGuideIds
{	
	
	// 起名
	int32 NewbieRenameGuideId = 1; // 新手起名引导id
	
	// 首次考核
	int32 FirstGameExamineGuideId = 2; // 第一局入会考核 99998
	
	// 考核胜利
	int32 WinGameExamineGuideId = 3; // 入会考核胜利 99999
	
	// 首次天梯匹配
	int32 FirstPairLadderGameGuideId = 4; // 首次天梯成功匹配 100400
	
	// 首次完成历练
	int32 FirstFinishStrengthenTrainingGuideId = 5; // 首次完成一局历练 100200
	
	// 新手教学第三关
	int32 WinNoviceGuideThirdRound = 6; // 通过新手教学第三关 4000
	
	// 新手教学第四关
	int32 WinNoviceGuideFourthRound = 7; // 通过新手教学第四关 5000

}

// Defined in table: GlobalsConf
message HotLive
{	
	
	// 开关状态
	bool Switch = 1; // 热门直播是否开启
	
	// 筛选场次
	int32 FilterCount = 2; // 每次筛选多少场次
	
	// 最低排名
	int32 MinLadderRank = 3; // 进入筛选的比赛双方的最低天梯排名
	
	// 入选时段
	string ValidDuration = 4; // 生效时间段，格式(hh:MM~hh:MM)
	
	// 筛选时长
	int32 FilterDuration = 5; // 每次筛选持续时长(时间秒)

}

// Defined in table: GlobalsConf
message EntNoviceReset
{	
	
	// 胜场数
	int32 WinTimes = 1; // 休闲+天梯胜场数
	
	// 匹配分
	int32 EloScore = 2; // 强制重置到的elo分

}

// Defined in table: GlobalsConf
message TLadderStarProtect
{	
	
	// 初始保护分
	int32 InitStarProtect = 1; // 初始保护分
	
	// 最大保护分
	int32 MaxStarProtect = 2; // 最大保护分

}

// Defined in table: GlobalsConf
message KeepWelfare
{	
	
	// 开关状态
	bool Switch = 1; 
	
	// 有效期限
	int32 ValidPeriod = 2; 

}

// Defined in table: GlobalsConf
message LadderKingRank
{	
	
	// 刷新间隔
	int32 RefreshInterval = 1; // 单位秒
	
	// 狼王段位
	int32 KingLevel = 2; // 狼王的段位数值
	
	// 生效赛季
	int32 ValidSeason = 3; // 哪个赛季才开始生效

}

// Defined in table: GlobalsConf
message GlobalsConfDefine
{	
	
	
	int32 GameNewPlayerWinCnt = 1; // 脱离新人阶段所需的休闲模式胜场数
	
	
	int32 GameSceneMaxNum = 2; // 场景最大个数
	
	
	int32 CardMaxCollectCnt = 3; // 卡牌最大收集个数
	
	
	string GameServerOpenTime = 4; // 开服时间, YYYY-mm-dd hh:mm:ss格式
	
	
	int32 WorldChatPresetChannelCnt = 5; // 世界聊天预设房间数
	
	
	repeated int32 WorldChatChannelPresetStatusLimit = 6; // 世界聊天房间状态人数限制
	
	
	repeated int32 WorldChatChannelHotStatusLimit = 7; // 世界聊天房间状态火爆人数限制
	
	
	EthnicExamine EthnicExamineData = 8; // 入会考核配置
	
	
	MysteryShop MysteryShopConfig = 9; // 神秘商店配置
	
	
	TFcmConfig FcmCfg = 10; // 防沉迷限制配置
	
	
	TFcmState FcmState = 11; // 防沉迷开关
	
	
	int32 FcmPayState = 12; // 防沉迷支付限制开关
	
	
	string FcmTopUpLimit = 13; // 年龄范围[8,16),单笔上限，每月上限
	
	
	uint32 MaxPKRoomCnt = 14; // 最大联赛房间数
	
	
	TUserEscapeGame UserEscapeConfig = 15; // 逃跑惩罚配置(旧语音版本配置)
	
	
	TUserConsumeLimit UserConsumeLimitConfig = 16; // 消费限制
	
	
	TLoginLimit LoginLimitConfig = 17; // 登录人数限制
	
	
	AutoCardGroup AIAutoCardGroupConfig = 18; // ai自动套牌
	
	
	InitialCardGroup InitialCardGroupConfig = 19; // 初始化牌库狼位置配置
	
	
	UserUploadCardGroup UploadCGConfig = 20; // 热门卡组配置
	
	
	GoodsItemTyp UploadCGRwdConfig = 21; // 热门卡组奖品配置
	
	
	RecCardGroup RecCardGroupConfig = 22; // 推荐卡组配置
	
	
	int32 RecCardMaxCnt = 23; // 单卡推荐最大张数
	
	
	repeated int64 StaticRecCGHotValScoreSeg = 24; // 静态推荐卡组-热度值热度积分分段
	
	
	repeated int64 StaticRecCGWinValScoreSeg = 25; // 静态推荐卡组-胜场值胜场积分分段
	
	
	repeated TRandNum XysyOnBoardConfig = 26; // 当己方狼人上阵时，会被赋予血月之力，即随机获得1-4点契约值
	
	
	int32 RecentLadderCntForAppraise = 27; // （评分引导用）统计天梯最近N场(目前支持20以内)
	
	
	repeated int32 PointedSkillForTaskFiniType = 28; // 统计任务条件409的卡牌指定技能
	
	
	repeated int32 PointedMarkForTaskFiniType = 29; // 统计任务条件409的卡牌指定标记
	
	
	repeated SpellFeature PointedSpellFearureForTaskFiniType = 30; // 统计任务条件409的卡牌指定技能特性
	
	
	NormalTime DayBeginTime = 31; // 每日开始时间
	
	
	repeated int32 UnlockFriendNeedFinishGuideIds = 32; // 解锁好友功能需完成的引导id列表（关联globals_type.xlsx的TaskPreConType:FriendUnlocked）
	
	
	int32 MaxFriendCnt = 33; // 最大好友数
	
	
	int32 MaxOneceRecdFriendCnt = 34; // 最大单次推荐好友数
	
	
	int32 MaxFriendBlacklistCnt = 35; // 好友黑名单上限
	
	
	int32 MaxFriendApplyMsgLen = 36; // 最大好友申请附言长度
	
	
	int32 FriendApplyExpireSec = 37; // 好友申请过期时间（秒）
	
	
	int32 MaxGuildDayKickCnt = 38; // 最大公会每日踢人上限
	
	
	int32 MaxWolfKingFullLvRewardCnt = 39; // 最大狼王令满级宝箱奖励数量
	
	
	int32 MinUserLvForPractice = 40; // 练习模式所需用户最小等级
	
	
	TGuideIds GuideIds = 41; // 引导id，特殊的新手和成长引导id
	
	
	HotLive HotLiveConf = 42; // 热门直播相关配置
	
	
	EntNoviceReset EntNoviceResetEloScore = 43; // 休闲新手阶段结束重置elo分
	
	
	int32 PairActiveSearchLimit = 44; // 匹配主动搜索上限
	
	
	repeated GoodsItemTyp AppraiseRwdConfig = 45; // 引导评价奖励
	
	
	KeepWelfare KeepWelfareCfg = 46; // 活跃卡牌奖励活动
	
	
	TLadderStarProtect LadderStarProtectCfg = 47; // 天梯保护分配置
	
	
	int32 MinRaceWinCntInRoundForRank = 48; // 竞技场单轮胜场最低入榜胜数
	
	
	int32 MinRaceMinRoundForAvgRank = 49; // 竞技场平均胜场榜入榜最低轮数
	
	
	int32 RaceRankSize = 50; // 竞技场榜单统计前N名
	
	
	int32 StreakLostCntForPunish = 51; // 开始结算处罚的连续负场数(大于等于该数开启处罚)
	
	
	int32 MinGameDurationForPunishLost = 52; // 算作有效负场的最短对局耗时(单位：分钟)(小于该数算无效)
	
	
	repeated int32 RoomTypeForPunish = 53; // 开启检测结算处罚的房间模式列表
	
	
	NormalTime RaceEndTipCheckTime = 54; // 竞技场结束提醒邮件的每天检查时间点(精确到分钟)
	
	
	int32 RaceEndTipMinLevel = 55; // 收到竞技场结束提醒邮件的玩家最低等级
	
	
	repeated int32 RaceEndTipDayList = 56; // 距离竞技场结束X天发送提醒邮件
	
	
	repeated int32 TaskFiniType159WatchedSkills = 57; // 任务条件159关注的技能id
	
	
	LadderKingRank LadderKingRankRefreshConf = 58; // 狼王段位排行榜刷
	
	
	string NewMoonLegendProductId = 59; // 新月传说月卡计费点
	
	
	int32 MaxCardGroupTryDayUseCnt = 60; // 限免卡组每日最多使用次数
	
	
	int32 MinUserLevelForCardGroupTry = 61; // 限免卡组所需玩家最小等级
	
	
	int32 EthnicTotalExpDayMax = 62; // 势力每日熟练度上限
	
	
	string EthnicRewardRefreshTime = 63; // 势力奖励更新时间, YYYY-mm-dd hh:mm格式
	
	
	string MedelTaskUserOffineTsMaxTime = 64; // 里程碑补丁奖励，限制玩家最后登出时间在此之前, YYYY-mm-dd hh:mm格式
	
	
	repeated uint64 NoMedelTaskUserIDList = 65; // 不接取里程碑任务的玩家id列表

}

// Defined in table: Level
message LevelDefine
{	
	
	
	int32 level = 1; // 勋章道具ID
	
	
	int64 exp = 7; // 升勋名望
	
	
	int32 week_chest = 8; // 每周宝箱ID
	
	
	repeated string daily_tasks_pri = 11; // 每日重点任务ID
	
	
	repeated string daily_tasks_normal = 12; // 每日普通任务ID
	
	
	int32 daily_tasks_cnt = 13; // 同时在做的每日任务最大数量
	
	
	repeated string weekly_tasks_pri = 14; // 每周重点任务ID
	
	
	repeated string weekly_tasks_normal = 15; // 每周普通任务ID
	
	
	int32 weekly_tasks_cnt = 16; // 同时在做的每周任务最大数量
	
	
	int32 upgrade_chest = 17; // 升勋宝箱道具ID
	
	
	int64 coin_rate = 19; // 金币奖励加成%(功能有效，弃用)

}

// Defined in table: CardSkin
message CardSkinDefine
{	
	
	
	int32 id = 1; // 角色ID
	
	
	bool is_default = 2; // 是否默认皮肤
	
	
	bool is_dynamic = 3; // 是否动态皮肤
	
	
	string quality = 14; // 稀有度

}

// Defined in table: CardSkin
message old_card_skinDefine
{	
	
	
	int32 id = 1; // ID
	
	
	bool is_default = 2; // 是否默认皮肤
	
	
	bool is_dynamic = 3; // 是否动态皮肤

}

// Defined in table: Goods
message ReplaceMoney
{	
	
	// 货币类型
	string MoneyType = 1; 
	
	// 货币数量
	int64 MoneyCnt = 2; 
	
	// 道具类型
	GoodsCategory MGoodsCategory = 3; 

}

// Defined in table: Goods
message JumpInfo
{	
	
	// 描述
	string text = 1; 
	
	// 跳转
	string info = 2; 

}

// Defined in table: Goods
message btnInfo
{	
	
	// 按钮类型
	string useType = 1; 
	
	// 功能类型
	string funcType = 2; 
	
	// 功能参数
	string funcEvent = 3; 

}

// Defined in table: Goods
message GoodsDefine
{	
	
	
	GoodsCategory category = 1; // 道具类别
	
	
	int32 id = 2; // ID
	
	
	int32 time_limit_id = 3; // 时限累加道具ID
	
	
	showTypeStr showType = 7; // 显示分类
	
	
	bool single = 8; // 不堆叠
	
	
	int32 usable_flag = 9; // 使用标识
	
	
	bool canCollect = 10; // 是否允许收集
	
	
	int32 rarity = 12; // 稀有度
	
	
	bool is_store_item = 13; // 是否商品
	
	
	int64 expire = 14; // 过期时间(秒)
	
	
	GoodsItemTyp expire_replace = 15; // 过期转换
	
	
	string end_time = 16; // 过期日期(与expire互斥)
	
	
	bool is_auto_use = 17; // 是否自动使用从何时开始激活有效时间
	
	
	int32 use_effect = 19; // 使用效果
	
	
	int32 chest_type = 20; // 宝箱类型
	
	
	int32 exchange_id = 21; // 使用时对应的兑换id
	
	
	bool only_one = 22; // 是否只能有一个
	
	
	ReplaceMoney replace_money = 23; // 既有替换

}

// Defined in table: CardBankCfg
message DropCore
{	
	
	// 数量
	int32 cnt = 1; 
	
	// 概率
	int32 p = 2; 

}

// Defined in table: CardBankCfg
message Partner
{	
	
	// 类型
	int32 typ = 1; 
	
	// 列表
	string list = 2; 

}

// Defined in table: CardBankCfg
message CardBankCfgDefine
{	
	
	
	CGRoleID roleid = 2; // roleid
	
	
	repeated int32 spellIDs = 3; // skillId
	
	
	string name = 4; // name
	
	
	CGCardType typ = 6; // typ
	
	
	CGCardSubTyp subTyp = 8; 
	
	
	EthnicType ethnicType = 9; // ethnic
	
	
	CGRoleQuality quality = 10; // quality
	
	
	CGRoleSeries series = 11; // series
	
	
	repeated int32 skinIDs = 13; // skinid
	
	
	int32 comNum = 17; // comNum
	
	
	int32 decomNum = 18; // decomNum
	
	
	repeated DropCore decomCore = 19; // decomCore
	
	
	bool canCompose = 20; // canCompose
	
	
	int32 maxUseCnt = 21; // 最大上阵张数
	
	
	int32 cantDecomCnt = 22; // 不可分解张数
	
	
	int32 pkValue = 23; // 信用值
	
	
	bool forbidCollect = 24; // forbidCollect
	
	
	bool forbidMulti = 25; // forbidMulti
	
	
	int32 newMoonUseMinDay = 26; // newMoonUseMinDay
	
	
	int32 guild_base_xf = 33; // 公会寻访基础值(不配不能寻访)

}

// Defined in table: CardBankCfg
message OldCardBankDefine
{	
	
	
	CGRoleID roleid = 2; // roleid
	
	
	repeated int32 spellIDs = 3; // skillId
	
	
	string name = 4; // name
	
	
	CGCardType typ = 6; // typ
	
	
	CGCardSubTyp subTyp = 8; 
	
	
	EthnicType ethnicType = 9; // ethnic
	
	
	CGRoleQuality quality = 10; // quality
	
	
	CGRoleSeries series = 11; // series
	
	
	repeated int32 skinIDs = 13; // skinid
	
	
	int32 comNum = 17; // comNum
	
	
	int32 decomNum = 18; // decomNum
	
	
	repeated DropCore decomCore = 19; // decomCore
	
	
	bool canCompose = 20; // canCompose
	
	
	int32 maxUseCnt = 21; // 最大上阵张数
	
	
	int32 cantDecomCnt = 22; // 不可分解张数
	
	
	int32 pkValue = 23; // 信用值
	
	
	bool forbidCollect = 24; // forbidCollect
	
	
	bool forbidMulti = 25; // forbidMulti
	
	
	int32 guild_base_xf = 30; // 公会寻访基础值(不配不能寻访)

}

// Defined in table: V2Spell
message V2SpellDefine
{	
	
	
	int32 ID = 1; // skillid
	
	
	CGSpellType typ = 2; // type
	
	
	int32 actPt = 4; // 消耗的行动点数
	
	
	repeated SpellFeature features = 5; // 技能特性
	
	
	int32 BuffType = 8; 

}

// Defined in table: V2Spell
message OldV2SpellDefine
{	
	
	
	int32 ID = 1; // skillid
	
	
	CGSpellType typ = 2; // type
	
	
	int32 actPt = 4; // 消耗的行动点数
	
	
	repeated SpellFeature features = 5; // 技能特性
	
	
	int32 BuffType = 8; 

}

// Defined in table: Shop
message GuildLevelLimit
{	
	
	// 公会商店等级
	int32 level = 1; 
	
	// 限购数量
	int32 limitCnt = 2; 

}

// Defined in table: Shop
message ShopDefine
{	
	
	
	int32 id = 1; // 商店条目id
	
	
	int32 offPriceGroupId = 2; // 每日特惠组id
	
	
	int64 upTime = 3; // 这个商品条目的更新时间
	
	
	string name = 4; // 名称
	
	
	string items = 6; // 卖的物品
	
	
	int32 shopType = 7; // 商店类型
	
	
	string price = 8; // 价格
	
	
	string quality = 9; // 商品品质
	
	
	int32 onceBuyMaxCnt = 10; // 单次购买个数上限
	
	
	string skinTopPrice = 11; // 皮肤直升动态价格
	
	
	int32 limit = 12; // 限购类型
	
	
	int32 limitCnt = 13; // 限购数量
	
	
	int32 limitDay = 14; // 限购周期天数
	
	
	repeated GuildLevelLimit guildLimit = 15; // 动态限购数量（按公会等级）
	
	
	string saleBegin = 16; // 开始售卖的时间
	
	
	string saleEnd = 17; // 停止售卖的时间
	
	
	string discountBegin = 26; // 开始打折的时间
	
	
	string discountEnd = 27; // 停止打折的时间
	
	
	string discountPrice = 28; // 打折价格
	
	
	string productId = 29; // 计费点
	
	
	int32 unlockRaceWinNum = 30; // 解锁需竞技场胜场数
	
	
	repeated int32 raceShopActId = 31; // 竞技场活动id
	
	
	int32 hasPresetCardId = 32; // 有预设卡组的id

}

// Defined in table: MonthCard
message ChargingPoint
{	
	
	// 计费点
	string ProductId = 1; 
	
	// 时长
	int64 Duration = 2; // 天数

}

// Defined in table: MonthCard
message MonthCardDefine
{	
	
	
	int32 id = 1; // 物品类型
	
	
	bool ableSignMultiReward = 2; // 签到加成
	
	
	repeated GoodsItemTyp dayReward = 3; // 每日领取的物品
	
	
	repeated ChargingPoint productInfo = 7; // 计费点信息

}

// Defined in table: card_task
message FiniCond
{	
	
	// ID
	int32 cid = 1; 
	
	// 类型
	int32 ctype = 2; 
	
	// 描述
	string desc = 3; 
	
	// 数量
	int32 count = 4; 
	
	// 参1
	string param1 = 5; 
	
	// 参2
	string param2 = 6; 
	
	// 参3
	string param3 = 7; 
	
	// 参4
	string param4 = 8; 

}

// Defined in table: card_task
message card_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message multi_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message medal_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message achieve_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message ladder_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message acommon_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message mode_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message xmode_mission_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message king_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message a7day_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message acycle_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: card_task
message afini_cycle_taskDefine
{	
	
	
	int32 id = 1; // 任务id 唯一
	
	
	int32 type = 2; // 任务类型
	
	
	repeated FiniCond finiConditions = 4; // 完成条件
	
	
	repeated FiniCond finiConditions2 = 5; // 完成条件(与finiConditions为‘或’关系)
	
	
	repeated GoodsItemTyp reward = 6; // 奖励
	
	
	bool auto_reward = 7; // 是否自动领奖
	
	
	int32 takeLvMin = 8; // 最小勋章接受任务
	
	
	int32 takeLvMax = 9; // 最大勋章接受任务
	
	
	int32 preTasks = 10; // 前置任务
	
	
	int32 nextTasks = 11; // 后置任务
	
	
	int32 randWeight = 12; // 随机权重(现在支持8挑战任务)
	
	
	string takeStartTime = 13; // 接受开始时间  对于卡牌排位赛任务, 填写赛季开始时间
	
	
	string takeEndTime = 14; // 接受结束时间  对于卡牌排位赛任务, 填写下一个赛季开始时间之前
	
	
	repeated GoodsItemTyp reward1 = 15; // 可选奖励1(选择)
	
	
	repeated GoodsItemTyp reward2 = 16; // 可选奖励2(选择)
	
	
	repeated GoodsItemTyp reward3 = 17; // 可选奖励3(选择)
	
	
	repeated FiniCond preConditions = 20; // 前置条件
	
	
	TaskClearType clearType = 21; // 任务删除类型

}

// Defined in table: RaceMatchCards
message RaceMatchCardsDefine
{	
	
	
	int32 wolfcpCnt = 1; // wolfcpCnt
	
	
	int32 nonWolfcpCnt = 2; // nonWolfcpCnt
	
	
	int32 overCondWin = 3; // over_cond_win
	
	
	int32 overCondLose = 4; // over_cond_lose

}

// Defined in table: RaceMatchCards
message RaceCandidateRolesDefine
{	
	
	
	CGRoleID role_id = 1; // 候选卡牌id
	
	
	int32 pr = 2; // 概率
	
	
	string startTime = 3; // 开始时间
	
	
	string endTime = 4; // 结束时间

}

// Defined in table: RaceMatchCards
message RaceChangeCardDefine
{	
	
	
	int32 win = 1; // 胜场条件
	
	
	int32 lose = 2; // 负场条件
	
	
	repeated CGCardType role_types = 3; // 可换身份
	
	
	int32 total_cnt = 4; // 可选择总数

}

// Defined in table: RaceMatchCards
message RaceMutexCardsDefine
{	
	
	
	int32 id = 1; // id
	
	
	repeated int32 cards = 2; // 互斥卡牌id

}

// Defined in table: RaceMatchCards
message RaceCosmicCardsDefine
{	
	
	
	repeated int32 cards = 1; // 宇宙流卡牌

}

// Defined in table: VIP
message VIPDefine
{	
	
	
	int32 VIP_level = 1; // vip等级
	
	
	int64 charge = 2; // 想要达到下一等级需要的课金数(RMB)
	
	
	int32 shopid = 4; // 特惠商品id
	
	
	int32 friends_max_add = 6; // 好友上限增加
	
	
	int32 daily_coins_max_add = 7; // 每日金币获取上限增加
	
	
	float match_coin_rate = 8; // 每场对决金币获取倍率
	
	
	float match_exp_rate = 9; // 每场对决经验获取倍率
	
	
	float card_decompose_rate = 10; // 卡牌分解获得碎片倍率
	
	
	repeated GoodsItemTyp reward_data = 11; // 到达该等级可获得的一次性奖励

}

// Defined in table: RaceReward
message RaceRewardDefine
{	
	
	
	int32 group = 1; // 奖励策略组id
	
	
	int32 winCnt = 2; // 胜场数
	
	
	repeated int32 goodsChests = 3; // 道具宝箱
	
	
	repeated int32 cardChests = 4; // 卡牌宝箱

}

// Defined in table: Products
message ProductsDefine
{	
	
	
	string productId = 1; // 计费点
	
	
	float rmb = 2; // 人民币
	
	
	int32 amount = 3; // 非首冲钻石数量（不包含赠送的钻石数量）
	
	
	int32 firstChargeAmount = 4; // 首冲钻石数量
	
	
	int32 presentAmount = 5; // 非首冲赠送的钻石数量
	
	
	int32 shopId = 6; // 对应的商店ID
	
	
	repeated GoodsItemTyp makeUpGoods = 12; // 超限购买补偿
	
	
	string makeUpMailTitle = 13; // 补偿邮件标题
	
	
	string makeUpMailContent = 14; // 补偿邮件内容
	
	
	repeated GoodsItemTyp presentGoods = 15; // 充值道具奖励(ex)

}

// Defined in table: chest
message ChestGoods
{	
	
	// 类型
	GoodsCategory category = 1; 
	
	// ID
	int32 id = 2; 
	
	// 最小
	int32 min_cnt = 3; 
	
	// 最大
	int32 max_cnt = 4; 
	
	// 掉落率
	int32 chance = 5; 
	
	// 替换类型
	GoodsCategory substitute_category = 6; 
	
	// 替换ID
	int32 substitute_id = 7; 
	
	// 替换数量
	int32 substitute_cnt = 8; 
	
	// Filter
	int32 filter = 9; 

}

// Defined in table: chest
message chestDefine
{	
	
	
	int32 item_type = 1; // 宝箱掉落类型
	
	
	string item_name = 2; // 宝箱掉落名称
	
	
	string item_icon = 3; // 宝箱图标
	
	
	string item_desc = 4; // 描述
	
	
	int32 group_id = 5; // 掉落组id
	
	
	int32 group_no_drop_chance = 6; // nodrop率
	
	
	repeated ChestGoods goods = 7; // 道具项目
	
	
	GoodsCategory pay_category = 8; // 全有补偿时，道具类型(唯一配置)
	
	
	int32 pay_id = 9; // 全有补偿时，道具id(唯一配置)
	
	
	int32 pay_cnt = 10; // 全有补偿时，道具数量(唯一配置)

}

// Defined in table: chest
message optional_chestDefine
{	
	
	
	int32 id = 1; // 宝箱id
	
	
	int32 pick_cnt = 2; // 可选数量
	
	
	string desc = 3; // 描述
	
	
	repeated GoodsItemTyp goods = 4; // 物品

}

// Defined in table: GuideReward
message GuideRewardDefine
{	
	
	
	int32 CondRound = 1; // cond_round
	
	
	bool CondWin = 2; // cond_win
	
	
	int32 Exp = 3; // exp
	
	
	int32 Coin = 4; // coin
	
	
	repeated GoodsItemTyp Reward = 5; // gs_category

}

// Defined in table: ExpCoin
message UserStage
{	
	
	// 用户阶段
	int32 Stage = 1; 
	
	// 用户level
	string LevelRange = 2; 

}

// Defined in table: ExpCoin
message ExpCoinDefine
{	
	
	
	int32 CondRoom = 1; // cond_room
	
	
	bool CondWin = 2; // 胜负
	
	
	int32 CondStage = 3; // 玩家阶段
	
	
	int32 Exp = 4; // 勋章经验
	
	
	repeated int32 ExpCoef = 5; // exp_coef（分钟）
	
	
	int32 EthnicExp = 6; // 势力经验
	
	
	repeated int32 EthnicExpCoef = 7; // 势力经验公式时间配置（分）
	
	
	int32 Coin = 8; // 金币
	
	
	int32 CoinCoef = 9; // 获取金币最小时间
	
	
	int64 DayMatchCoinsLimit = 10; // 每日金币获取上限
	
	
	int32 HappyCoin = 11; // 欢乐豆
	
	
	int32 HappyCoinCoef = 12; // 获取欢乐豆最小时间
	
	
	repeated UserStage UserStages = 13; // 玩家阶段定义

}

// Defined in table: LadderRank
message SeasonReward
{	
	
	// 赛季
	int32 Season = 1; 
	
	// 宝箱ID
	int32 Chest = 2; 

}

// Defined in table: LadderRank
message LadderRankDefine
{	
	
	
	uint32 ID = 1; // id
	
	
	string Name = 2; // name
	
	
	int32 Star = 3; // star
	
	
	int32 LvType = 4; // leveltype
	
	
	int32 TotalStar = 5; // total_star
	
	
	int32 LoseStar = 6; // lose_star
	
	
	int32 ProtectCnt = 7; // protect_cnt
	
	
	repeated SeasonReward SeasonRewards = 10; // reward
	
	
	int32 MinMatchScore = 11; // min_match_score
	
	
	int32 MaxMatchScore = 12; // max_match_score

}

// Defined in table: LadderRank
message LevelRankRewardDefine
{	
	
	
	uint32 ID = 1; // id
	
	
	int32 season = 2; // 赛季
	
	
	int32 LvType = 3; // 段位
	
	
	int32 Rank = 4; // 排名
	
	
	int32 Reward = 5; // 奖励

}

// Defined in table: RoomScore
message RoomScoreDefine
{	
	
	
	string RoomStr = 1; // room_type
	
	
	int32 K = 2; // K
	
	
	int32 S = 3; // S
	
	
	int32 InitScore = 4; // init_score
	
	
	int32 ProtectScore = 5; // protect_score
	
	
	string Desc = 6; // desc

}

// Defined in table: RankSucessed
message RankSucessedDefine
{	
	
	
	uint32 ID = 1; // id
	
	
	uint32 Level = 2; // level
	
	
	string Name = 3; // name
	
	
	int32 StarMin = 4; // star_min
	
	
	int32 StarMax = 5; // star_max
	
	
	uint32 SucceedLevel = 6; // succeed_level
	
	
	string SucceedName = 7; // succeed_name
	
	
	int32 SucceedStar = 8; // succeed_star

}

// Defined in table: AdventureMission
message plot
{	
	
	// 阶段
	string name = 1; 
	
	// ID
	int32 id = 2; 

}

// Defined in table: AdventureMission
message AdventureMissionDefine
{	
	
	
	int32 mission_id = 1; // 关卡id
	
	
	AdventureMode mission_mode = 2; // 关卡模式
	
	
	repeated plot plots = 4; // 剧情
	
	
	int32 guideId = 5; // 引导ID
	
	
	int32 difficulty_hero = 6; // 对应的英雄难度关卡
	
	
	int32 boss_id = 7; // boss牌id
	
	
	int32 unlock_level = 8; // 挑战等级
	
	
	repeated int32 opp_card_group = 9; // 对手套牌设置
	
	
	int32 ethnic = 10; // 势力
	
	
	int32 start_day = 11; // 开始时的天数
	
	
	int32 start_stage_of_day = 12; // 开始时的阶段(白天/黑夜)
	
	
	repeated GoodsItemTyp reward = 13; // 过关奖励道具
	
	
	repeated GoodsItemTyp reward_cards = 14; // 过关奖励卡牌
	
	
	int32 pre_misison_id = 20; // 前置关卡id
	
	
	string opp_name = 21; // 对手的名字
	
	
	int32 exp = 22; // 经验
	
	
	int32 opp_gender = 23; // 对手性别(男=1, 女=2)
	
	
	int32 robot_lv = 24; // 机器人强度

}

// Defined in table: UserBlackList
message UserBlackListDefine
{	
	
	
	uint64 userid = 1; // userid
	
	
	string nickname = 2; // nickname

}

// Defined in table: CardGroupRule
message CardGroupRuleDefine
{	
	
	
	int32 stage = 1; // 阶段
	
	
	string userlv = 2; // 玩家等级
	
	
	int32 card_total = 3; // 总牌数
	
	
	int32 wolf_cnt = 4; // 狼牌数
	
	
	int32 hand_cnt = 5; // 初始手牌数
	
	
	int32 stack_cnt = 6; // 库牌

}

// Defined in table: AdminPermission
message AdminPermissionDefine
{	
	
	
	string role = 1; // 管理员角色
	
	
	repeated string permission = 2; // 权限

}

// Defined in table: Chapter
message MovePoint
{	
	
	// 起
	int32 start = 1; 
	
	// 终
	int32 over = 2; 
	
	// 点
	string points = 3; 

}

// Defined in table: Chapter
message ChapterDefine
{	
	
	
	int32 chapter_id = 1; // 章节id
	
	
	int32 chapter_unlock_mission = 2; // 解锁章节的关卡编号
	
	
	int32 chapter_unlock_level = 3; // 解锁章节的等级
	
	
	bool isopen = 4; // 是否开放
	
	
	repeated int32 mission_id = 5; // 包含的关卡

}

// Defined in table: AICardGroup
message AICardGroupDefine
{	
	
	
	int32 id = 1; // id
	
	
	int32 current_total_star = 2; // 当前总星星数
	
	
	int32 history_total_star = 3; // 历史总星星数
	
	
	EthnicType ethnic_type = 4; // 种族
	
	
	bool is_orderly = 5; // 固定卡组顺序
	
	
	repeated int32 role_ids = 6; // 卡组

}

// Defined in table: CardMatch
message CardMatchDefine
{	
	
	
	int32 season = 1; // 赛季
	
	
	string name = 2; // 名字
	
	
	string type = 3; // 赛季类型
	
	
	string begin_time = 4; // 开始日期
	
	
	string end_time = 5; // 结束日期
	
	
	repeated string time_range_daily = 6; // 开始当天时间
	
	
	int32 min_level_limit = 7; // 最小等级参加
	
	
	repeated int32 task_ids = 8; // 任务id
	
	
	string join_match_way = 9; // 参加方法
	
	
	string room_mode = 10; // 房间类型
	
	
	int32 lost_or_escape_limit_daily = 11; 
	
	
	int32 lost_or_escape_limit_week = 12; 
	
	
	int32 escape_limit_daily = 13; 
	
	
	int32 escape_limit_weekly = 14; 

}

// Defined in table: Guild
message GuildBase
{	
	
	// 创建公会所需玩家等级
	int32 create_lv = 1; 
	
	// 成为理事所需的活跃值
	int32 councilor_condition = 2; 
	
	// 创建公会所需的钻石
	int32 create_cost = 3; 

}

// Defined in table: Guild
message GuildLevel
{	
	
	// 公会等级
	int32 level = 1; 
	
	// 升到下一级所需活跃
	int32 activity = 2; 
	
	// 最大人数
	int32 max_members = 3; 

}

// Defined in table: Guild
message GuildRole
{	
	
	// 公会职务
	int32 role = 1; 
	
	// 所需贡献
	int32 activity = 2; 
	
	// 职务名
	string name = 3; 

}

// Defined in table: Guild
message GuildActivityUpLv
{	
	
	// 集结号等级
	int32 level = 1; 
	
	// 升级所需公会等级
	int32 guild_level = 2; 

}

// Defined in table: Guild
message GuildJob
{	
	
	// 公会内勤需要消耗的钻石数
	int64 cost = 1; 
	
	// 公会内勤获得的活跃度
	int32 activity = 2; 
	
	// 公会内勤获得的货币
	int32 points = 3; 

}

// Defined in table: Guild
message GuildBuild
{	
	
	// 公会建设获得的活跃度
	int32 activity = 1; 
	
	// 公会建设获得的货币
	int32 points = 2; 

}

// Defined in table: Guild
message GuildShop
{	
	
	// 商店等级
	int32 level = 1; 
	
	// 升级所需公会等级
	int32 guild_level = 2; 

}

// Defined in table: Guild
message GuildActivityRate
{	
	
	// 公会职务
	int32 role = 1; 
	
	// 比率
	int32 rate = 2; 

}

// Defined in table: Guild
message GuildXfCfg
{	
	
	// 可切换寻访目标，但切换寻访目标需要消耗钻石
	int32 change_xf_card_cost = 1; 
	
	// 每名玩家每天可获得的"诚意度"需要设置上限
	int32 day_add_xf_value_max = 2; 
	
	// 每名玩家每天可帮助/赠送的对象总数设置上限
	int32 day_help_user_max = 3; 
	
	// 每名玩家每天对同一名对象只可帮助1次
	int32 day_help_user_times_max = 4; 
	
	// 帮助时加多少寻访值
	int32 help_add_xf = 5; 

}

// Defined in table: Guild
message Preview
{	
	
	// 公会升级
	int32 level = 1; 
	
	// 最大人数
	int32 max_members = 2; 
	
	// 限购数增加
	int32 limit_buy = 3; 
	
	// 新商品
	bool new_shop = 4; 

}

// Defined in table: Guild
message GuildDefine
{	
	
	
	GuildBase base = 1; // 基础配置
	
	
	GuildLevel level = 2; // 公会等级设定
	
	
	GuildRole roles = 4; // 公会职务设定
	
	
	GuildActivityRate activity_rate = 5; // 公会活跃度加成百分比%
	
	
	GuildActivityUpLv divination_up_lv = 6; // 占卜活动等级设置
	
	
	GuildActivityUpLv hunting_up_lv = 7; // 悬赏活动等级设置
	
	
	GuildActivityUpLv treasure_up_lv = 8; // 宝图活动等级设置
	
	
	int32 max_develop_activity = 9; // 发展每人每日活跃度上限
	
	
	int32 MinJoinDuraionOfAssignMaster = 10; // 候选会长加入公会时间最小值（小时）
	
	
	int32 MaxInLoginTimeOfAssignMaster = 11; // 候选会长最近曾登录过的时间间隔(天)
	
	
	int32 MaxApplyJoinGuildDuration = 12; // 申请加入时限(天)
	
	
	int32 MaxApplyJoinGuildNum = 13; // 公会加入申请的数量上限
	
	
	int32 MaxRecommendGuild = 14; // 推荐公会的最大数量
	
	
	int32 MaxDailyRecruit = 15; // 每日招募上限
	
	
	int32 MaxRecruitToken = 16; // 召集令上限
	
	
	GuildShop shop = 17; // 商店设定
	
	
	repeated int32 hunt_secret_list_wolf = 18; // 公会悬赏秘密通缉随机列表-狼
	
	
	repeated int32 hunt_secret_list_role = 19; // 公会悬赏秘密通缉随机列表-神
	
	
	repeated int32 hunt_secret_list_villager = 20; // 公会悬赏秘密通缉随机列表-民
	
	
	int32 treasure_rate = 21; // 胜利后获得公会宝图碎片的概率
	
	
	repeated int32 treasure_room_type = 22; // 可以获得宝图计数的房间类型
	
	
	repeated int32 hunting_room_type = 23; // 可以获得悬赏计数的房间类型
	
	
	GuildXfCfg xf_cfg = 24; // 寻访配置
	
	
	int32 big_commission_max_limit = 25; // 每周重酬委托次数上限
	
	
	int32 small_commission_max_limit = 26; // 每周快速委托次数上限
	
	
	GoodsItemTyp rename_consume_good = 27; // 改会名消耗的物品
	
	
	int32 rename_cd_hour = 28; // 改名冷却时间（小时）
	
	
	GoodsItemTyp divi_consume_good = 29; // 占卜消耗的物品

}

// Defined in table: RoomSettings
message RoomSettingsDefine
{	
	
	
	string room_mode_type = 1; // 房间类型
	
	
	int32 seat_cnt = 2; // 座位数
	
	
	int32 min_player_cnt = 3; // 最小玩家数
	
	
	int32 user_level_limit = 4; // 等级限制
	
	
	bool enable_spectate = 5; // 是否允许旁观
	
	
	bool enable_ai_room_spectate = 6; // 是否允许有ai的房间可以观战
	
	
	bool enable_set_spectate = 7; // 是否允许房主设置旁观
	
	
	int32 spectator_cnt = 8; // 允许旁观的数量
	
	
	bool enable_spectator_chat = 9; // 是否允许旁观者发言
	
	
	bool enable_record_replay = 10; // 是否记录录像信息
	
	
	bool enable_record_file = 11; // 是否记录录像文件
	
	
	string game_type = 12; // 游戏模式
	
	
	string visual_type = 13; // 观战模式
	
	
	int32 visual_delay = 14; // 观战延迟
	
	
	int32 role_cnt = 15; // 角色数量
	
	
	int32 PlayerA = 16; // PlayerA数量
	
	
	int32 PlayerB = 17; // PlayerB数量

}

// Defined in table: CGPairCfg
message Candidate
{	
	
	// 等待匹配分范围
	int32 WaitScore = 1; 
	
	// 严格匹配分范围
	int32 StrictScore = 2; 
	
	// 宽松匹配分范围
	int32 LooseScore = 3; 

}

// Defined in table: CGPairCfg
message BanPair
{	
	
	// 禁止同IP
	bool SameIP = 1; 
	
	// 相遇次数
	int32 MeetCnt = 2; 
	
	// 游戏局数
	int32 MeetGameRound = 3; 
	
	// 时长
	int32 MeetDuraMin = 4; 

}

// Defined in table: CGPairCfg
message Duration
{	
	
	// 伪装匹配时长
	string FakePairSecStr = 1; 
	
	// 等待匹配时长
	string WaitSecStr = 2; 
	
	// 严格匹配时长
	int32 StrictSec = 3; 
	
	// 宽松匹配时长
	int32 LooseSec = 4; 
	
	
	repeated int32 FakePairSec = 5; 
	
	
	repeated int32 WaitSec = 6; 

}

// Defined in table: CGPairCfg
message RobotRule
{	
	
	// 匹配前游戏局数
	int32 GameCntAtStart = 1; 
	
	// 匹配前失败次数
	int32 LoseCntAtStart = 2; 
	
	// 结束要ai
	bool NeedRobotAtEnd = 3; 
	
	// 套牌配置优先
	bool IsConfigPriority = 4; 

}

// Defined in table: CGPairCfg
message MultiRule
{	
	
	// 上次匹配成功间隔
	string SinceLastSucc = 1; // 距离上次成功匹配的时间间隔
	
	// 队列玩家数量下限
	int32 MinPlayerLimit = 2; // 队列中的最少玩家数量

}

// Defined in table: CGPairCfg
message CGPairCfgDefine
{	
	
	
	string mtype = 1; // 赛事类型
	
	
	int32 score = 2; // 匹配分
	
	
	Candidate candidate = 3; // 匹配分范围
	
	
	BanPair banPair = 4; // 禁止匹配
	
	
	bool firstdayAble = 5; // 首日匹配
	
	
	Duration duration = 6; // 匹配时长
	
	
	RobotRule robotRule = 7; // 匹配ai
	
	
	bool ignoreCheckRule = 8; // 忽略规则检查
	
	
	repeated StageAI StageAIs = 9; // ai使用的卡组
	
	
	int32 robotPairScore = 10; // ai的匹配分
	
	
	repeated RobotLevel robot_levels = 11; // ai强度

}

// Defined in table: CGPairCfg
message CGMultiPairCfgDefine
{	
	
	
	string mtype = 1; // 赛事类型
	
	
	BanPair banPair = 2; // 禁止匹配
	
	
	repeated MultiRule pairRule = 3; // 匹配规则

}

// Defined in table: CardGroup
message CardGroupItem
{	
	
	// 角色
	CGRoleID role = 1; 
	
	// 名称
	string name = 2; 
	
	// 个数
	int32 cnt = 3; 

}

// Defined in table: CardGroup
message CardGroupDefine
{	
	
	
	int32 id = 1; // 卡组编号
	
	
	string name = 2; // 卡组名称
	
	
	EthnicType ethnic = 3; // 种族
	
	
	int32 battlecost_max = 4; // 上阵卡牌总cost
	
	
	repeated CardGroupItem item = 5; // 角色列表

}

// Defined in table: CardGroup
message AllRolesDefine
{	
	
	
	CardGroupItem item = 1; // 角色列表

}

// Defined in table: RobotRule
message RobotRuleDefine
{	
	
	
	string IDRange = 1; // ID范围
	
	
	int32 male = 2; // 男性占比
	
	
	int32 female = 3; // 女性占比

}

// Defined in table: RobotRule
message RobotLevelDefine
{	
	
	
	int32 cardsLevel = 1; // 卡组强度
	
	
	string levelRange = 2; // 级别范围

}

// Defined in table: RobotRule
message VipLevelDefine
{	
	
	
	int32 cardsLevel = 1; // 卡组强度
	
	
	string robotLevelRange = 2; // robot等级范围
	
	
	string vipRange = 3; // vip级别范围

}

// Defined in table: RobotRule
message GameDataDefine
{	
	
	
	int32 ladderLevel = 1; // 段位
	
	
	string ladderCntRange = 2; // 天梯场次
	
	
	string raceCntRange = 3; // 竞技轮次
	
	
	string entCntRange = 4; // 休闲场次
	
	
	string carnivalCntRange = 5; // 狂欢场次

}

// Defined in table: RobotRule
message CollectAvatarHeadDefine
{	
	
	
	int32 vipLevel = 1; // vip级别
	
	
	string randRange = 2; // 头像数量范围
	
	
	repeated int32 headPool = 3; // 头像库

}

// Defined in table: RobotRule
message CollectAvatarBorderDefine
{	
	
	
	int32 vipLevel = 1; // vip级别
	
	
	string randRange = 2; // 头像框数量范围
	
	
	repeated int32 borderPool = 3; // 头像框库

}

// Defined in table: RobotRule
message CollectCardBackDefine
{	
	
	
	int32 vipLevel = 1; // vip级别
	
	
	string randRange = 2; // 卡背数量范围
	
	
	repeated int32 cardBackPool = 3; // 卡背库

}

// Defined in table: RobotRule
message SkinInGsDefine
{	
	
	
	int32 vipLevel = 1; // vip级别
	
	
	string skinRange = 2; // 皮肤个数范围

}

// Defined in table: RobotRule
message CollectCardsDefine
{	
	
	
	int32 vipLevel = 1; // vip级别
	
	
	string cardRange = 2; // 收集的卡牌数范围

}

// Defined in table: RobotRule
message CollectSkinsDefine
{	
	
	
	int32 vipLevel = 1; // vip级别
	
	
	string skinRange = 2; // 皮肤数量范围
	
	
	repeated int32 skinPool = 3; // 皮肤数量范围

}

// Defined in table: RobotRule
message LikesDefine
{	
	
	
	string levelRange = 1; // level范围
	
	
	string likesRange = 2; // 收集的卡牌数范围

}

// Defined in table: RobotRule
message CharmsDefine
{	
	
	
	string levelRange = 1; // level范围
	
	
	string charmsRange = 2; // 魅力值范围

}

// Defined in table: RobotRule
message CardGroupLevelDefine
{	
	
	
	int32 Level = 1; // 卡组强度
	
	
	string name = 2; // 名称
	
	
	string wolfRange = 3; // 狼数范围
	
	
	string villagerRange = 4; // 村民数范围
	
	
	string normalGodRange = 5; // 普通神卡数范围
	
	
	string godRange = 6; // 神卡数范围

}

// Defined in table: RobotRule
message RobotNameDefine
{	
	
	
	string ZHName = 1; // 中文名字
	
	
	string ENName = 2; // 英文名字

}

// Defined in table: ModeEntrance
message Position
{	
	
	// X
	float x = 1; 
	
	// Y
	float y = 2; 

}

// Defined in table: ModeEntrance
message PosAndScale
{	
	
	// X
	float x = 1; 
	
	// Y
	float y = 2; 
	
	// S
	float scale = 3; 

}

// Defined in table: ModeEntrance
message ModeEntranceDefine
{	
	
	
	int32 id = 1; // id
	
	
	RoomModeType type = 2; // 模式类型
	
	
	string modeName = 3; 
	
	
	string starttime = 5; // 开始时间
	
	
	string endtime = 6; // 结束时间
	
	
	repeated string cycletime = 7; // 循环时间
	
	
	int32 minlv = 8; // 最小等级
	
	
	int32 compete_id = 9; // 关联官方赛事id
	
	
	int32 race_reward_group = 10; // 关联竞技场奖励组
	
	
	repeated uint32 taskIds = 11; // 任务
	
	
	repeated string ethnicTaskIds = 12; // 势力任务

}

// Defined in table: ModeEntrance
message ModeConfigDefine
{	
	
	
	int32 pos = 1; // 位置

}

// Defined in table: Gift
message GiftDefine
{	
	
	
	uint32 id = 1; // 礼包码id
	
	
	string key_word = 2; // 礼包码前缀 (通用礼包码需填写完整编码)
	
	
	CDKeyType type = 3; // 礼包类型
	
	
	string name = 4; // 名称
	
	
	string mail_content = 5; // 邮件内容
	
	
	string begin_time = 6; // 开始时间
	
	
	string end_time = 7; // 结束时间
	
	
	int32 max_cnt = 8; // 单个礼包码领取上限
	
	
	int32 max_per_user = 9; // 每人领取上限
	
	
	int32 lv_min = 10; // 最小等级
	
	
	int32 lv_max = 11; // 最大等级
	
	
	repeated GoodsItemTyp items = 12; // 道具
	
	
	repeated string channel = 13; // 渠道编号

}

// Defined in table: MonthAddUpSign
message MonthAddUpSignDefine
{	
	
	
	int32 month_type = 1; // 单双月
	
	
	int32 day = 2; // 天数
	
	
	repeated GoodsItemTyp rewards = 3; // 奖励
	
	
	int32 month_card_multiple = 4; // 月卡加倍
	
	
	GoodsItemTyp exchange_src = 7; // 兑换所需物
	
	
	GoodsItemTyp exchange_tgt = 8; // 兑换获得物
	
	
	int32 exchange_top_limit = 9; // 兑换次数上限

}

// Defined in table: Scene
message SceneDefine
{	
	
	
	repeated int32 game_mode = 1; // 游戏模式
	
	
	repeated int32 mode_params = 2; // PVE冒险模式关卡PVP模式天梯段位
	
	
	repeated int32 scene_id = 3; // 场景ID

}

// Defined in table: SCSignPeriod
message SCSignPeriodDefine
{	
	
	
	string start = 1; // 开始时间
	
	
	string end = 2; // 结束时间
	
	
	string desc = 3; // 描述

}

// Defined in table: CardBagProtect
message CBSettings
{	
	
	// 开包默认幸运值
	int32 DefaultLuckyValue = 1; 
	
	// 必的非重橙卡数
	int32 NoRepeatedLegendCnt = 2; 

}

// Defined in table: CardBagProtect
message CardBagProtectDefine
{	
	
	
	int64 MaxOpenCardbagDay = 1; // 每日开包上限
	
	
	int32 ProtectPeriod = 2; // 保底周期
	
	
	int32 ProtectCardBag = 3; // 保底卡包

}

// Defined in table: CardBagProtect
message CardBagLuckyValueDefine
{	
	
	
	GoodsItemTyp ID = 1; // 卡包ID
	
	
	int32 LuckyValue = 2; // 可获得幸运值

}

// Defined in table: CardBagProtect
message CardBagLuckyLevelDefine
{	
	
	
	int32 Level = 1; // 等级
	
	
	int32 LuckyGroup = 2; // 幸运卡组
	
	
	int32 LegendLuckyValue = 3; // 获得橙卡幸运值
	
	
	int32 EpicLuckyValue = 4; // 获得紫卡幸运值
	
	
	bool HasEpicGuar = 5; // 是否有紫卡保底

}

// Defined in table: CardBagProtect
message CardBagLuckyGroupDefine
{	
	
	
	int32 LuckyGroup = 1; // 卡包幸运组
	
	
	repeated GoodsItemTyp InnerCardBag = 2; // 包含卡包物品ID

}

// Defined in table: CardBagProtect
message LuckyLegendDefine
{	
	
	
	int32 CardbagChest = 1; // 卡包对应chest
	
	
	int32 LuckyReplaceChest = 2; // 幸运值达到后替换chest

}

// Defined in table: CardBagProtect
message LuckyEpicDefine
{	
	
	
	int32 CardbagChest = 1; // 卡包对应chest
	
	
	int32 LuckyReplaceChest = 2; // 幸运值达到后替换chest

}

// Defined in table: CardBagProtect
message CertainGoodsDefine
{	
	
	
	repeated GoodsItemTyp CertainLegendGoods = 1; // 必出橙卡卡包
	
	
	repeated GoodsItemTyp CertainEpicGoods = 2; // 必出紫卡卡包
	
	
	repeated GoodsItemTyp AppointLegendGoods = 3; // 必定获得指定橙卡卡包

}

// Defined in table: CardBagProtect
message CardBagSettingsDefine
{	
	
	
	CBSettings Settings = 1; // 卡包全局设置

}

// Defined in table: AssistConfig
message AssistConfigDefine
{	
	
	
	int32 AssistValue = 1; // 助理值
	
	
	repeated GoodsItemTyp Reward = 2; // 奖励

}

// Defined in table: GtIpPass
message GtIpPassDefine
{	
	
	
	string gt_pass = 1; // 允许ip (status服务on_inner状态)

}

// Defined in table: AchieveAllChest
message AchieveAllChestDefine
{	
	
	
	int64 achieve = 1; // 成就总名望
	
	
	int32 chest = 2; // 当前宝箱id

}

// Defined in table: AchieveAllChest
message AchieveCollectChestDefine
{	
	
	
	int64 achieve = 1; // 成就总名望
	
	
	int32 chest = 2; // 当前宝箱id

}

// Defined in table: AchieveAllChest
message AchieveTrainChestDefine
{	
	
	
	int64 achieve = 1; // 成就总名望
	
	
	int32 chest = 2; // 当前宝箱id

}

// Defined in table: AchieveAllChest
message AchieveFightChestDefine
{	
	
	
	int64 achieve = 1; // 成就总名望
	
	
	int32 chest = 2; // 当前宝箱id

}

// Defined in table: GuildDivination
message GuildDivinationDefine
{	
	
	
	int32 level = 1; // 等级
	
	
	int32 id = 2; // ID
	
	
	int32 rate = 3; // 抽中概率
	
	
	repeated GoodsItemTyp reward = 4; // 可领奖励
	
	
	int32 addActivity = 11; // 加公会活跃度及用户贡献活跃度

}

// Defined in table: GuildHuntingTask
message GuildHuntingTaskDefine
{	
	
	
	int32 id = 1; // ID
	
	
	int32 goalNum = 2; // 目标数量
	
	
	int32 huntLv = 3; // 悬赏等级
	
	
	int32 goalType = 4; // 目标类型（1狼 2神 3民）
	
	
	int32 kindType = 5; // 属类
	
	
	repeated GoodsItemTyp reward = 8; // 可领奖励
	
	
	int32 addActivity = 9; // 加公会活跃度及用户贡献活跃度

}

// Defined in table: GuildTreasure
message GuildTreasureDefine
{	
	
	
	int32 level = 1; // 宝图玩法等级
	
	
	int32 map_id = 2; // 宝图id
	
	
	int32 fragement_num = 3; // 本宝图碎片数
	
	
	int32 can_pick_num = 4; // 可领奖需要碎片数量
	
	
	repeated GoodsItemTyp reward = 5; // 可领奖励
	
	
	int32 add_activity = 6; // 加公会活跃度及用户贡献活跃度

}

// Defined in table: EthnicLevel
message EthnicLevelDefine
{	
	
	
	int32 level = 1; // 等级
	
	
	int32 exp = 2; // 熟练度
	
	
	int32 mkup402_totalexp = 3; // 等级对应的总经验(402版本补偿)
	
	
	repeated GoodsItemTyp kingdom_reward = 5; // 王国升级奖励
	
	
	repeated GoodsItemTyp ranger_reward = 6; // 白鸽盟升级奖励
	
	
	repeated GoodsItemTyp black_gown_reward = 7; // 黑袍会升级奖励
	
	
	repeated GoodsItemTyp spirit_temple_reward = 8; // 圣灵殿升级奖励
	
	
	repeated GoodsItemTyp master_reward = 9; // 秩序塔升级奖励
	
	
	repeated GoodsItemTyp lurker_reward = 10; // 潜行社升级奖励

}

// Defined in table: EthnicLevel
message EthnicMakeUp402Define
{	
	
	
	int32 total_exp = 1; // 总熟练度大于等于此值
	
	
	repeated GoodsItemTyp makeup_reward = 2; // 补偿奖励

}

// Defined in table: ReplenishSign
message ReplenishSignDefine
{	
	
	
	int32 reple_cnt = 1; // 补签次数
	
	
	GoodsItemTyp need_item = 2; // 需要的物品

}

// Defined in table: ReportPunish
message ReportPunishDefine
{	
	
	
	int32 BeReportedCnt = 1; // 被举报次数
	
	
	int32 PunishType = 2; // 处理类型
	
	
	repeated int32 Parameter1 = 3; // 参数1
	
	
	int32 Parameter2 = 4; // 参数2
	
	
	int32 Parameter3 = 5; // 参数3
	
	
	bool IsAutoPunish = 6; // 是否自动处理

}

// Defined in table: Report
message ReportDefine
{	
	
	
	string Key = 1; // 键
	
	
	bool BoolVal = 2; // 布尔值
	
	
	int32 IntVal = 3; // 整型值
	
	
	string StrVal = 4; // 字符串

}

// Defined in table: GuildCommission
message IntRange
{	
	
	// 最小
	int32 min = 1; 
	
	// 最大
	int32 max = 2; 

}

// Defined in table: GuildCommission
message GoodType
{	
	
	// 道具类型
	GoodsCategory Category = 1; 
	
	// 道具ID
	int32 ID = 2; 

}

// Defined in table: GuildCommission
message GuildCommissionDefine
{	
	
	
	int32 mission_id = 1; // 委托id
	
	
	int32 mission_type = 2; // 委托类型
	
	
	GoodsItemTyp cosume_good = 3; // 消耗的物品
	
	
	int32 spend_minute = 4; // 耗时（分）
	
	
	int32 commission_exp = 5; // 委托经验奖励
	
	
	GoodType user_reward = 6; // 奖励的物品
	
	
	IntRange add_guild_activity = 7; // user_reward的数量 or 给公会的活跃度奖励

}

// Defined in table: GuildCommissionLv
message GuildCommissionLvDefine
{	
	
	
	int32 mission_level = 1; // 委托等级
	
	
	int32 next_lv_exp = 2; // 升至下一级所需委托经验
	
	
	repeated GoodsItemTyp user_reward = 3; // 奖励的物品

}

// Defined in table: GuildCommissionStage
message GuildCommissionStageDefine
{	
	
	
	int32 mission_stage = 1; // 个人委托进度
	
	
	int32 next_stage_cnt = 2; // 下一级所需已消耗的委托证道具数量
	
	
	repeated GoodsItemTyp user_reward = 3; // 奖励的物品

}

// Defined in table: MysteryShopDrop
message ItemData
{	
	
	// 商品Id
	int32 id = 1; 
	
	// 掉落率
	int32 chance = 2; 

}

// Defined in table: MysteryShopDrop
message MysteryShopDropDefine
{	
	
	
	int32 id = 1; // 索引id
	
	
	int32 refresh_type = 2; // 刷新方式
	
	
	CGRoleQuality quality = 3; // 品质
	
	
	int32 chance = 4; // 概率
	
	
	repeated ItemData items = 5; // 商品
	
	
	int32 group_id = 6; // 分组id

}

// Defined in table: MysteryShopDrop
message mystery_shopDefine
{	
	
	
	int32 id = 1; // id
	
	
	string start_time = 2; // 开始时间
	
	
	string end_time = 3; // 结束时间

}

// Defined in table: StrengthenTraining
message tStage
{	
	
	// 天
	int32 Day = 1; // 第几天
	
	// 剩余回合
	int32 Turn = 2; // 剩余行动次数，默认4次
	
	// 夜晚
	bool Night = 3; // 是否夜晚
	
	// 行动力
	int32 ActPoint = 4; // 剩余a行动力。 注：此处行动力需支持配置a的值大于3

}

// Defined in table: StrengthenTraining
message tHandCard
{	
	
	// id
	int32 ID = 1; // 卡牌id
	
	// 位置
	int32 Pos = 2; // 位置
	
	// 身份
	CGCardType Role = 3; // 身份
	
	// 信用点
	int32 PkValue = 4; // 当前信用点
	
	// 信用点上限
	int32 MaxPkValue = 5; // 当前信用点上限
	
	// 状态
	string StateStr = 6; // 潜伏/潜伏可视/暴露/疲劳
	
	// 标记
	string MarkStr = 7; // 身上的标记(锁定、护甲...)
	
	// 额外技能
	string ExSpellStr = 8; // 额外的技能id
	
	
	repeated int32 States = 9; 
	
	
	repeated int32 Marks = 10; 
	
	
	repeated int32 ExSpells = 11; 

}

// Defined in table: StrengthenTraining
message tVicSta3
{	
	
	// 谁
	int32 Who = 1; // 玩家or电脑：0己方，1对方
	
	// 狼
	int32 WolfCnt = 2; // 剩余狼人个数
	
	// 神
	int32 RoleCnt = 3; // 剩余神个数
	
	// 民
	int32 VillagerCnt = 4; // 剩余民个数

}

// Defined in table: StrengthenTraining
message tVicSta4
{	
	
	// 谁
	int32 Who = 1; // 玩家or电脑：0己方，1对方
	
	// id
	int32 ID = 2; // 位置：位置 1-8；不配置时该位置无契灵
	
	// 位置
	int32 Pos = 3; // 契灵id：该位置上的契灵
	
	// 身份
	CGCardType Role = 4; // 身份：Wolf/SP/OG（不配置时可取card_bank默认身份；但需支持配置身份与配置契灵id冲突，即配置一张id：1的初征狼人，但有可能结束时其身份变成了神）
	
	// 信用点
	int32 PkValue = 5; // 契约值：契灵当前契约值；契约值的颜色（红色、白色、绿色）保持原有逻辑
	
	// 状态
	string StateStr = 6; // 状态：默认值为潜伏；可配置暴露、疲劳、潜伏可视；
	
	// 标记
	string MarkStr = 7; // 标记：护甲、锁定；可不配置(或默认配置)
	
	// 额外技能
	string ExSpellStr = 8; // 额外技能：可不配置(或默认配置)
	
	
	repeated int32 States = 9; 
	
	
	repeated int32 Marks = 10; 
	
	
	repeated int32 ExSpells = 11; 

}

// Defined in table: StrengthenTraining
message tLoseSta2
{	
	
	// 天
	int32 Day = 1; // 第几天
	
	// 回合
	int32 Turn = 2; // 第几回合结束时，如果是夜晚，就是指夜晚的回合
	
	// 夜晚
	bool Night = 3; // 是否夜晚

}

// Defined in table: StrengthenTraining
message StrengthenTrainingDefine
{	
	
	
	int32 id = 1; // 编号
	
	
	int32 helpId = 2; // 关联的词条id
	
	
	repeated GoodsItemTyp reward = 10; // 完成奖励
	
	
	tStage gameStage = 11; // 局内阶段
	
	
	bool firstHand = 12; // 玩家先手
	
	
	EthnicType ethnic = 13; 
	
	
	repeated tHandCard handCards = 14; 
	
	
	repeated int32 stackCards = 15; // 我方牌库卡牌信息
	
	
	int32 heroState = 16; // 村庄技能状态
	
	
	string rivalName = 17; // 对手名称
	
	
	EthnicType rivalEthnic = 18; // 对手的势力
	
	
	repeated tHandCard rivalHandCards = 19; // 对手场上卡牌信息
	
	
	repeated int32 rivalStackCards = 20; // 对手牌库卡牌信息
	
	
	int32 rivalHeroState = 21; // 对手村庄技能状态
	
	
	int32 vicCon = 22; // 胜利条件
	
	
	repeated tVicSta3 vicSta3 = 23; // 3胜利状态
	
	
	repeated tVicSta4 vicSta4 = 24; // 4或5胜利状态
	
	
	int32 loseCon = 25; // 失败条件
	
	
	tLoseSta2 loseSta2 = 26; // 2或3失败状态

}

// Defined in table: PeakFilter
message GradeLevel
{	
	
	// 段位
	int32 Grade = 1; // 天梯段位
	
	// 等级
	int32 Level = 2; // 天梯等级

}

// Defined in table: PeakFilter
message PeakFilterDefine
{	
	
	
	int32 id = 1; // Id
	
	
	RoomModeType room_mode = 2; // 房间类型
	
	
	bool is_filter = 3; // 是否筛选
	
	
	int32 min_days = 4; // 比赛最少天数
	
	
	int32 max_days = 5; // 比赛最大天数
	
	
	int32 min_elo_score = 6; // ELO分下限
	
	
	bool is_surrender_filter = 7; // 主动投降
	
	
	float min_elo_score_release_rate = 8; // ELO分下限放宽百分比
	
	
	bool is_level_filter = 9; // 是否分段位筛选
	
	
	repeated GradeLevel level_group = 10; // 分段段位等级

}

// Defined in table: PeakFilter
message WolfDiffDefine
{	
	
	
	int32 diff_value = 1; // 狼人差
	
	
	int32 score = 2; // 分值

}

// Defined in table: PeakFilter
message CardDiffDefine
{	
	
	
	int32 diff_value = 1; // 卡牌差
	
	
	int32 score = 2; // 分值

}

// Defined in table: PeakFilter
message FinalWolfDiffDefine
{	
	
	
	int32 diff_value = 1; // 结果狼人差
	
	
	int32 score = 2; // 分值

}

// Defined in table: PeakFilter
message EloDiffDefine
{	
	
	
	int32 diff_value = 1; // ELO分差绝对值
	
	
	int32 score = 2; // 分值

}

// Defined in table: PeakFilter
message EloSumDefine
{	
	
	
	int32 sum_value = 1; // ELO分和
	
	
	int32 score = 2; // 分值

}

// Defined in table: WolfKingActivity
message WolfKingActivityDefine
{	
	
	
	int32 id = 1; // 狼王令赛季id
	
	
	string startTime = 7; // 开始时间
	
	
	string endTime = 8; // 结束时间
	
	
	int32 group = 9; // 等级奖励策略组
	
	
	GoodsItemTyp normal_cosume_good = 10; // 普通进阶消耗的物品
	
	
	GoodsItemTyp higher_cosume_good = 11; // 特惠进阶消耗的物品
	
	
	repeated GoodsItemTyp higher_reward = 12; // 特惠进阶奖励的物品
	
	
	GoodsItemTyp one_exp_cost_good = 13; // 加1点经验消耗的物品
	
	
	int32 week_need_fini_task_cnt = 14; // 周任务所需完成任务数量
	
	
	repeated GoodsItemTyp week_reward = 15; // 每周完成任务的奖励
	
	
	repeated string task_ids = 16; // 任务列表
	
	
	int32 special_task_rate = 17; // 特殊任务出现概率（分母为100）
	
	
	uint32 special_task_id = 18; // 特殊任务id
	
	
	string double_reward_start_time = 19; // 任务奖励翻倍开始时间
	
	
	string double_reward_end_time = 20; // 任务奖励翻倍结束时间

}

// Defined in table: WolfKingLv
message WolfKingLvDefine
{	
	
	
	int32 group = 1; // 狼王令策略组id
	
	
	int32 medal_level = 2; // 狼王令等级
	
	
	int32 next_lv_exp = 3; // 升至下一级所需狼王令经验
	
	
	repeated GoodsItemTyp normal_reward = 4; // 普通版奖励的物品
	
	
	repeated GoodsItemTyp advance_reward = 5; // 进阶版奖励的物品
	
	
	bool fulllv_flag = 6; // 是否显示为循环宝箱

}

// Defined in table: bar_type_reward
message bar_type_rewardDefine
{	
	
	
	BarRewardTyp type = 1; // 日奖励/周奖励
	
	
	int32 id = 2; // id
	
	
	repeated GoodsItemTyp require = 3; // 要求道具
	
	
	string specialRequire = 4; // 特殊要求
	
	
	repeated GoodsItemTyp reward = 5; // 可领奖励
	
	
	bool needConsume = 6; // 是否要消耗道具

}

// Defined in table: PKRoom
message RankRate
{	
	
	// 排名
	uint32 rank = 1; // 排名
	
	// 分成
	uint32 rate = 2; // 奖励百分比（分母10000）

}

// Defined in table: PKRoom
message PKRoomDefine
{	
	
	
	PKMode pk_mode = 1; // 联赛模式
	
	
	int32 max_lost_cnt = 2; // 最大负场数（超过时无法继续比赛）
	
	
	int32 max_play_cnt = 3; // 最大比赛场数（超过时无法继续比赛）
	
	
	GoodsItemTyp create_cosume_good = 4; // 创建比赛消耗的物品
	
	
	GoodsItemTyp join_cosume_good = 5; // 加入比赛消耗的物品
	
	
	GoodsItemTyp reward_good = 6; // 比赛奖励的物品（个数程序来算）
	
	
	uint32 reward_exchange_rate = 7; // 奖励兑换率
	
	
	uint32 max_member_cnt = 8; // 房间最多人数
	
	
	int32 wait_minute = 9; // 等待开始阶段时限（分钟）
	
	
	int32 fight_minute = 10; // 战斗阶段时限（分钟）
	
	
	int32 wait_fight_end_minute = 11; // 等待战斗结束时限（分钟）
	
	
	int32 final_minute = 12; // 战果阶段时限（分钟）
	
	
	RoomModeType room_type = 13; // 房间模式
	
	
	EthnicType card_group_ethnic = 14; // 套牌限定
	
	
	repeated RankRate rank_rate_list = 15; // 奖励分成(分母10000)

}

// Defined in table: ActiveAllCfg
message ChannelSwitch
{	
	
	// 开关
	Switch Switch = 1; // 开：活动在指定渠道开启；关：活动在指定渠道关闭
	
	// 渠道
	string Channels = 2; 

}

// Defined in table: ActiveAllCfg
message TagUnit
{	
	
	// 页签名
	string Name = 1; // 页签名
	
	// 任务列表
	string TaskList = 2; // 任务列表【逗号隔开】

}

// Defined in table: ActiveAllCfg
message ActiveAllCfgDefine
{	
	
	
	int32 id = 1; // 活动id
	
	
	repeated ActivityType types = 2; // 对应的sheet活动(同类型不可重复)
	
	
	string startTime = 3; // 开始时间
	
	
	string endTime = 4; // 结束时间
	
	
	string showTime = 5; // 提前展示时间
	
	
	string closeTime = 6; // 延后结束时间
	
	
	int32 maxTakeCnt = 7; // 自动循环活动的接取次数上限
	
	
	ChannelSwitch channelSwitch = 8; // 渠道开关

}

// Defined in table: ActiveAllCfg
message welfare_allDefine
{	

}

// Defined in table: ActiveAllCfg
message keep_taskDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	int32 task = 2; // 任务

}

// Defined in table: ActiveAllCfg
message keep_schedDefine
{	
	
	
	int32 sched = 1; // 进度
	
	
	repeated GoodsItemTyp reward = 2; // 奖励

}

// Defined in table: ActiveAllCfg
message sevendayDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	repeated GoodsItemTyp reward = 2; // 当日奖励

}

// Defined in table: ActiveAllCfg
message sevenday_pcDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	repeated GoodsItemTyp reward = 2; // 当日奖励
	
	
	int32 xianding = 3; // 是否限定

}

// Defined in table: ActiveAllCfg
message contsignDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	repeated GoodsItemTyp reward = 2; // 当日奖励

}

// Defined in table: ActiveAllCfg
message task7dayDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	repeated int32 tasks = 2; // 任务列表

}

// Defined in table: ActiveAllCfg
message activity_ladder_lvDefine
{	
	
	
	int32 id = 1; // 活动id
	
	
	int32 ladder_lv = 2; // 天梯等级
	
	
	repeated GoodsItemTyp reward = 3; // 奖励

}

// Defined in table: ActiveAllCfg
message rebate7taskDefine
{	
	
	
	int32 act_id = 1; // 活动id
	
	
	int32 day = 2; // 天数
	
	
	int32 tasks = 3; // 任务列表

}

// Defined in table: ActiveAllCfg
message exchangeDefine
{	
	
	
	int32 activityId = 1; // 活动id
	
	
	int32 exchangeId = 2; // 兑换id
	
	
	repeated GoodsItemTyp consumableGoods = 3; // 消耗物品
	
	
	GoodsItemTyp exchangeGoods = 4; // 兑换物品
	
	
	int32 exchangeCount = 5; // 兑换上限次数

}

// Defined in table: ActiveAllCfg
message act_cycle_taskDefine
{	
	
	
	int32 act_id = 1; // 活动id
	
	
	repeated TagUnit tag_unit_list = 2; // 任务列表

}

// Defined in table: ActiveAllCfg
message act_common_taskDefine
{	
	
	
	int32 act_id = 1; // 活动id
	
	
	repeated TagUnit tag_unit_list = 2; // 任务列表

}

// Defined in table: ActiveAllCfg
message act_fini_cycle_taskDefine
{	
	
	
	int32 act_id = 1; // 活动id
	
	
	repeated int32 tasks = 2; // 任务列表

}

// Defined in table: ActiveAllCfg
message adDefine
{	
	
	
	int32 act_id = 1; // 活动id
	
	
	string bg = 2; // 大图
	
	
	string title = 3; // 标题
	
	
	string jump = 5; // 前往

}

// Defined in table: ActiveAllCfg
message card_previewDefine
{	
	
	
	int32 card_id = 1; // 卡牌id
	
	
	string showTime = 2; // 开放时间
	
	
	int32 activeId = 3; // 活动id

}

// Defined in table: CarnivalCardPool
message CarnivalCardPoolDefine
{	
	
	
	RoomModeType room_type = 1; // 房间模式
	
	
	EthnicType main_ethnic = 2; // 主种族类型
	
	
	EthnicType side_ethnic = 3; // 副种族类型
	
	
	int32 wolf_cnt = 4; // 狼数量
	
	
	int32 neutra_cnt = 5; // 中立数量
	
	
	int32 main_cnt = 6; // 主势力数量
	
	
	int32 side_cnt = 7; // 副势力数量
	
	
	repeated string wolf_roles = 8; // 狼池
	
	
	repeated string neutra_roles = 9; // 中立角色池
	
	
	repeated string main_ethnic_roles = 10; // 主势力卡池
	
	
	repeated string side_ethnic_roles = 11; // 副势力卡池

}

// Defined in table: LoginWhiteList
message LoginWhiteListDefine
{	
	
	
	string account = 1; // 正式服白名单账号
	
	
	int32 lwl_type = 2; // 大陆正式服

}

// Defined in table: LoginWhiteList
message LoginWhiteListHuaWeiXFDefine
{	
	
	
	string account = 1; // 华为先锋服白名单账号
	
	
	int32 lwl_type = 2; // 华为先锋测试服

}

// Defined in table: LoginWhiteList
message LoginWhiteListOfficialApplyDefine
{	
	
	
	string account = 1; // 正式服白名单账号
	
	
	int32 lwl_type = 2; // 阿里测试服(大陆提审)

}

// Defined in table: LoginWhiteList
message LoginWhiteListOverSeaOfficialDefine
{	
	
	
	string account = 1; // 海外正式服白名单账号
	
	
	int32 lwl_type = 2; // 海外正式服

}

// Defined in table: Compete
message WinReward
{	
	
	// 胜场
	uint32 wincnt = 1; // 胜场
	
	// 道具类型
	GoodsCategory category = 2; // 道具类型
	
	// 道具ID
	int32 id = 3; // 道具ID
	
	// 个数
	int32 count = 4; // 个数

}

// Defined in table: Compete
message CompeteDefine
{	
	
	
	int32 id = 1; // 官方赛事id
	
	
	RoomModeType room_type = 5; // 房间模式
	
	
	GoodsItemTyp join_cosume_good = 6; // 加入比赛消耗的物品
	
	
	GoodsItemTyp adv_cosume_good = 7; // 进阶消耗的物品
	
	
	int32 need_ladder_lv = 8; // 所需最低天梯段位
	
	
	int32 max_lost_cnt = 9; // 最大负场数（超过时无法继续比赛）
	
	
	int32 max_play_cnt = 10; // 最大比赛场数（超过时无法继续比赛）
	
	
	repeated WinReward win_reward = 11; // 比赛普通奖励的物品
	
	
	repeated WinReward win_reward_ex = 12; // 比赛额外奖励的物品
	
	
	int32 rank_reward_group = 13; // 策略组
	
	
	EthnicType card_group_ethnic = 14; // 套牌限定

}

// Defined in table: Compete
message CompeteWinDiffDefine
{	
	
	
	int32 wins = 1; // 胜场数
	
	
	int32 diff = 2; // 胜场差绝对值

}

// Defined in table: CompeteReward
message CompeteRewardDefine
{	
	
	
	int32 group = 1; // 官方赛事奖励组id
	
	
	int32 minrank = 2; // 排名下限
	
	
	int32 maxrank = 3; // 排名上限
	
	
	repeated GoodsItemTyp reward_goods = 4; // 排名奖励

}

// Defined in table: GuildFlag
message UnlockCondition
{	
	
	// 解锁类型
	int32 UnlockType = 1; // 跟上面的UnLockType对应
	
	// 解锁参数
	int32 UnlockParam = 2; 

}

// Defined in table: GuildFlag
message GuildFlagDefine
{	
	
	
	int32 id = 1; // 索引
	
	
	FlagPartName part_name = 2; // 部件名称
	
	
	FLagPartPayType part_type = 3; // 部件类型
	
	
	int32 shop_item_id = 4; // 商品
	
	
	GoodsItemTyp goods = 5; // 物品
	
	
	repeated UnlockCondition unlock_cond = 6; // 解锁条件

}

// Defined in table: CardBack
message CardBackDefine
{	
	
	
	int32 id = 1; // id
	
	
	string name = 2; // name
	
	
	string desc = 3; // desc

}

// Defined in table: CGTag
message CGTagDefine
{	
	
	
	int32 id = 1; // 卡组标签id
	
	
	string name_key = 2; // 标签名

}

// Defined in table: cardStory
message cardStoryDefine
{	
	
	
	int32 id = 1; // id
	
	
	string story_type = 2; // 类型
	
	
	string title = 3; // 标题
	
	
	int32 unlock_id = 4; // 解锁对应的剧情引导id
	
	
	string des = 5; // 描述
	
	
	repeated GoodsItemTyp reward = 6; // 道具类型:GCCardSkin 道具ID:34 个数:1
	
	
	int32 missionId = 7; // 1
	
	
	string tip = 8; // 请配置成对应的对话

}

// Defined in table: CGAIGroupCfg
message WolfPosition
{	
	
	// 起始位置
	int32 LeftPosition = 1; 
	
	// 结束位置
	int32 RightPosition = 2; 

}

// Defined in table: CGAIGroupCfg
message DynamicAvoid
{	
	
	// 剩余狼人
	int32 RemainWolf = 1; 
	
	// 避让程度
	int32 AvoidLevel = 2; 

}

// Defined in table: CGAIGroupCfg
message IgnoreNormal
{	
	
	// 剩余狼人
	int32 RemainWolf = 1; 
	
	// 无视概率
	int32 IgnoreProb = 2; 

}

// Defined in table: CGAIGroupCfg
message CGAIGroupCfgDefine
{	
	
	
	int32 id = 1; // ai类型编号
	
	
	repeated DynamicAvoid feature1 = 2; // 特性1(动态避让)
	
	
	int32 feature2 = 3; // 特性2(算力-偏差度)
	
	
	int32 feature3 = 4; // 特性3(算力-深度)
	
	
	WolfPosition feature4 = 5; // 特性4(运气-牌堆)
	
	
	int32 feature5 = 6; // 特性5(运气-好运不连)
	
	
	repeated IgnoreNormal feature6 = 7; // 特性6(偏好-爱用狼人)
	
	
	repeated DynamicAvoid WolfAvoidLevel = 8; // 找狼概率调整避让程度

}

// Defined in table: questionTab
message questionTabDefine
{	
	
	
	int32 id = 1; // 问卷ID
	
	
	GoodsItemTyp reward = 3; // 奖励

}

// Defined in table: questionTab
message base_enDefine
{	

}

// Defined in table: questionTab
message questionsDefine
{	

}

// Defined in table: questionTab
message questions_enDefine
{	

}

// Defined in table: Rebate
message RebateDefine
{	
	
	
	int64 rmbMin = 1; // 充值金额(RMB.分)
	
	
	int64 rmbMax = 2; // 范围( a>=A and a <= B)
	
	
	int32 rate = 3; // 比例（百分比）
	
	
	GoodsItemTyp rateReward = 4; // 比例增值道具，需要叠加处理(此处的个数为rmb值对应狼印的比例,使用时比方30，显示30*1*1.5 )
	
	
	repeated GoodsItemTyp reward = 5; // 充值后返利奖励（需要叠加处理）

}

// Defined in table: Rebate
message rebateTaskDefine
{	
	
	
	GameTestPeriod game_period = 1; // 第几次测试
	
	
	repeated GoodsItemTyp reward = 2; // 完成返利母任务公测奖励

}

// Defined in table: Rebate
message rebate_finish_timeDefine
{	
	
	
	string reward_finish_time = 1; // 返利结束时间

}

// Defined in table: Rebate
message rebateRewardDefine
{	
	
	
	int32 game_period = 1; // 第几次测试
	
	
	string user_account = 2; // 账号(sndaId)
	
	
	string user_channel = 3; // 渠道
	
	
	int64 rmb_total = 4; // 充值总额
	
	
	bool task = 5; // 任务是否完成

}

// Defined in table: Rebate
message abtestRewardDefine
{	
	
	
	string sndaId = 1; // 盛大id
	
	
	string giftCDKey = 2; // 礼包码

}

// Defined in table: shopPresetCard
message shopPresetCardDefine
{	
	
	
	int32 id = 1; // id
	
	
	string name = 2; // 名字
	
	
	EthnicType ethnicType = 4; // 种族

}

// Defined in table: Practice
message FixedCardPair
{	
	
	// 卡牌
	int32 CardID = 1; // 卡牌id
	
	// 明置
	bool IsFaceUp = 2; // 是否明置状态

}

// Defined in table: Practice
message PracticeDefine
{	
	
	
	int32 practice_id = 1; // 练习id
	
	
	EthnicType ethnicType = 2; // 种族
	
	
	bool unlocked = 3; // 是否已解锁
	
	
	int32 ai_card_group = 4; // 机器人套牌id
	
	
	string robot_name = 5; // 机器人名字
	
	
	int32 robot_lv = 6; // 机器人强度
	
	
	repeated GoodsItemTyp reward_goods = 7; // 过关奖励道具
	
	
	repeated int32 reward_cards = 8; // 过关奖励卡牌
	
	
	repeated int32 orient_draw_ids = 9; // 优先抽卡id组

}

// Defined in table: Practice
message helpCardsDefine
{	
	
	
	int32 cardId = 1; // 卡牌ID
	
	
	bool compose = 2; // 是否能合成
	
	
	int32 trackId = 3; // 历练对应的关卡ID
	
	
	bool medal = 4; // 是否能在勋章里获得

}

// Defined in table: Practice
message OrientDrawDefine
{	
	
	
	int32 id = 1; // 序号
	
	
	repeated FixedCardPair fixed_pair = 2; // 固定搭配
	
	
	int32 weight = 3; // 优先级

}

// Defined in table: RealName
message RealNameDefine
{	
	
	
	int32 platformId = 1; // sdk的platformId
	
	
	bool reportLoginout = 2; // 是否上报loginout数据
	
	
	bool realAntiAddiction = 3; // sdk是否自带防沉迷(真实)
	
	
	bool realName = 4; // sdk是否自带实名制
	
	
	bool forceRealName = 5; // sdk是否强制实名制，不可关闭的

}

// Defined in table: V2CardDiff
message V2CardDiffDefine
{	
	
	
	int32 id = 1; // 编号（此编号为判断是否已经展示过，新增配置只允许增加）
	
	
	bool vaild = 2; // 是否发布
	
	
	string startTime = 3; // 开始展现时间
	
	
	string endTime = 4; // 结束展现时间
	
	
	string oldCfgId = 5; // 老ID
	
	
	string newCfgId = 6; // 新ID
	
	
	int32 decom = 7; // 分解反尘
	
	
	int32 remainLimit = 8; // 剩余卡牌限制
	
	
	string decomTime = 9; // 反尘截止时间

}

// Defined in table: NoviceGuide
message GuideCardGroup
{	
	
	// 卡组
	string CardGroup = 1; 
	
	// 势力
	EthnicType Ethnic = 2; 
	
	// 昵称
	string Name = 3; 
	
	// 顺序卡组
	bool IsOrderly = 4; // 卡组是否保持配置的顺序
	
	// AI强度
	int32 RobotLevel = 5; 
	
	// 初始手牌数
	int32 InitHandCnt = 6; 

}

// Defined in table: NoviceGuide
message tGuide3Stage
{	
	
	// 天
	int32 Day = 1; // 第几天
	
	// 剩余回合
	int32 Turn = 2; // 剩余行动次数，默认4次
	
	// 夜晚
	bool Night = 3; // 是否夜晚
	
	// 行动力
	int32 ActPoint = 4; // 剩余a行动力。 注：此处行动力需支持配置a的值大于3

}

// Defined in table: NoviceGuide
message tGuide3HandCard
{	
	
	// id
	int32 ID = 1; // 卡牌id
	
	// 位置
	int32 Pos = 2; // 位置
	
	// 身份
	CGCardType Role = 3; // 身份
	
	// 信用点
	int32 PkValue = 4; // 当前信用点
	
	// 信用点上限
	int32 MaxPkValue = 5; // 当前信用点上限
	
	// 状态
	string StateStr = 6; // 潜伏/潜伏可视/暴露/疲劳
	
	// 标记
	string MarkStr = 7; // 身上的标记(锁定、护甲...)
	
	// 额外技能
	string ExSpellStr = 8; // 额外的技能id
	
	
	repeated int32 States = 9; 
	
	
	repeated int32 Marks = 10; 
	
	
	repeated int32 ExSpells = 11; 

}

// Defined in table: NoviceGuide
message NoviceGuideDefine
{	
	
	
	int32 id = 1; // 新手教学关卡id
	
	
	GuideCardGroup player_card_group = 2; // 玩家卡组信息
	
	
	GuideCardGroup ai_card_group = 3; // ai卡组信息

}

// Defined in table: NoviceGuide
message guide3_gameDefine
{	
	
	
	tGuide3Stage gameStage = 1; // 局内阶段
	
	
	bool firstHand = 2; // 玩家先手
	
	
	EthnicType ethnic = 3; 
	
	
	repeated tGuide3HandCard handCards = 4; 
	
	
	repeated int32 stackCards = 5; // 我方牌库卡牌信息
	
	
	int32 heroState = 6; // 村庄技能状态
	
	
	int32 robotLevel = 7; // 对手ai强度
	
	
	EthnicType rivalEthnic = 8; // 对手的势力
	
	
	repeated tGuide3HandCard rivalHandCards = 9; // 对手场上卡牌信息
	
	
	repeated int32 rivalStackCards = 10; // 对手牌库卡牌信息
	
	
	int32 rivalHeroState = 11; // 对手村庄技能状态

}

// Defined in table: NoviceGuide
message first_noviceDefine
{	
	
	
	repeated GoodsItemTyp rewords = 1; // 新手场首场奖励

}

// Defined in table: GoodsExchange
message GoodsExchangeDefine
{	
	
	
	int32 id = 1; // 兑换id
	
	
	GoodsItemTyp src_goods = 2; // 源物品
	
	
	repeated GoodsItemTyp tgt_goods = 3; // 目标物品

}

// Defined in table: CardGroupTry
message CardGroupTryDefine
{	
	
	
	int32 id = 1; // 卡组id
	
	
	string start_time = 2; // 开始时间
	
	
	string end_time = 3; // 结束时间
	
	
	string name = 4; // 卡组名
	
	
	EthnicType ethnic_type = 5; // 种族
	
	
	repeated int32 cardid_list = 6; // 卡组id

}

// Defined in table: NewMoonLegend
message NewMoonLegendDefine
{	
	
	
	int32 id = 1; // 物品类型
	
	
	bool ableSignMultiReward = 2; // 签到加成
	
	
	bool battleHelper = 3; // 小助手
	
	
	repeated GoodsItemTyp buyReward = 4; // 购买奖励

}

// Defined in table: NewMoonLegend
message NewMoonLegendDayRewardDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	repeated GoodsItemTyp dayReward = 2; // 购买奖励

}

// Defined in table: PlayerRegress
message PlayerRegressDefine
{	
	
	
	int32 minLevel = 1; // 玩家等级
	
	
	int32 leaveDays = 2; // 未登录天数
	
	
	int32 lastTriggerDays = 3; // 距离上一次触发回归的天数
	
	
	int32 durationDays = 4; // 回归持续天数

}

// Defined in table: PlayerRegress
message PlayerRegressRewardsDefine
{	
	
	
	int32 day = 1; // 天数
	
	
	repeated GoodsItemTyp dayReward = 2; // 每天奖励

}

// Defined in table: PlayerRegress
message PlayerRegressGiftsDefine
{	
	
	
	int32 id = 1; // 序号id
	
	
	int32 goods = 2; // 商品id

}

// Defined in table: UserLabels
message RangeData
{	
	
	
	UserLabelDataType DataType = 1; // 数据类型，对应globals_type.xlsx中的【UserLabelDataType】
	
	
	string DateVal = 2; // 范围比较

}

// Defined in table: UserLabels
message StringData
{	
	
	
	UserLabelDataType DataType = 1; 
	
	
	string DateVal = 2; // 等于比较

}

// Defined in table: UserLabels
message IntegerData
{	
	
	
	UserLabelDataType DataType = 1; 
	
	
	int32 DateVal = 2; // 大于等于比较
	
	
	string Operator = 3; // 比较符：> >= < <= = !=

}

// Defined in table: UserLabels
message BooleanData
{	
	
	
	UserLabelDataType DataType = 1; 
	
	
	bool DateVal = 2; // true、false

}

// Defined in table: UserLabels
message UserLabelsDefine
{	
	
	
	int32 id = 1; // 标签id
	
	
	int32 baseLabel = 2; // 固定标签
	
	
	int32 actionLabel = 3; // 动态标签

}

// Defined in table: UserLabels
message UserBaseLabelsDefine
{	
	
	
	int32 id = 1; // 标签id
	
	
	RangeData L_MedalGrade = 2; // 勋章等级
	
	
	RangeData L_TotalRecharge = 3; // 充值
	
	
	RangeData L_TotalLoginDays = 4; // 累计登录

}

// Defined in table: UserLabels
message UserActionLabelsDefine
{	
	
	
	int32 id = 1; // 标签id
	
	
	IntegerData L_MostBattleEthnic = 2; // 白鸽盟套牌战斗次数

}

// Defined in table: MedelPatch
message MedelPatchDefine
{	
	
	
	int32 user_level = 1; // 练习id
	
	
	string mail_sbj = 2; // 邮件标题
	
	
	string mail_content = 3; // 邮件内容
	
	
	repeated GoodsItemTyp reward_goods = 4; // 邮件奖励道具
	
	
	MedelPatchCode can_take = 5; // 能否接里程碑任务

}

// Defined in table: RecmdCG
message RecmdCGDefine
{	
	
	
	int32 id = 1; // 卡组id
	
	
	string start_time = 2; // 开始时间
	
	
	string end_time = 3; // 结束时间
	
	
	string name = 4; // 卡组名
	
	
	EthnicType ethnic_type = 5; // 种族
	
	
	repeated int32 cardid_list = 6; // 卡组id

}

